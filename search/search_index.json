{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hebrew(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\") A python package with methods to handle the complexities of Hebrew text. \udb40\udc20\udb40\udc20 Documentation : https://hebrew.aviperl.me/ Repository : https://github.com/avi-perl/hebrew Installation $ pip install hebrew Example Hebrew assists in working with Hebrew text by providing methods to handle the text according to user-perceived characteristics. Additionally, methods for common Hebrew text processing are provided. >>> from hebrew import Hebrew >>> from hebrew.chars import HebrewChar, ALEPH >>> hs = Hebrew('\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea') >>> list(hs.graphemes) ['\u05d1\u05bc\u05b0', '\u05e8\u05b5', '\u05d0', '\u05e9\u05c1\u05b4\u0596', '\u05d9', '\u05ea'] >>> hs.text_only() \u05d1\u05e8\u05d0\u05e9\u05d9\u05ea >>> ALEPH HebrewChar(char='\u05d0', name='Aleph', hebrew_name='\u05d0\u05b8\u05dc\u05b6\u05e3', name_alts=['Alef'], hebrew_name_alts=None, final_letter=False) >>> HebrewChar.search('bet') HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', name_alts=None, hebrew_name_alts=None, final_letter=False) Grapheme Characters Hebrew text comes in different forms, depending on the context. Hebrew text may appear with Niqqudot \"a system of diacritical signs used to represent vowels or distinguish between alternative pronunciations of letters of the Hebrew alphabet\". ^1 Additionally, Hebrew text may appear with extensive punctuation characters that connect words, separate them, and cantillation marks \"used as a guide for chanting the text, either from the printed text or, in the case of the public reading of the Torah\" ^2 . Because of the above, from the perspective of a hebrew reader, the following 3 words are the same: 1. \u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea 2. \u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u05d9\u05ea 3. \u05d1\u05e8\u05d0\u05e9\u05d9\u05ea However, as a unicode string, they are entirely different because of the additional characters. >>> len(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\") # 1 12 >>> len(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u05d9\u05ea\") # 2 11 >>> len(\"\u05d1\u05e8\u05d0\u05e9\u05d9\u05ea\") # 3 6 This impacts the user is a number of other ways. For example, if I want to get the root of this hebrew word using a slice: Expected: \u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea >>> he = \"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\" >>> he[-5:] '\u05c1\u05b4\u0596\u05d9\u05ea' The solution to this is to handle the unicode string as a list of grapheme ^3 characters, where each letter and its accompanying characters are treated as a single unit. Working with Grapheme Characters Using the grapheme library for python, we can work with the grapheme characters as units. This allows us to get the right number of characters, slice the string correctly, and more. >>> import grapheme >>> grapheme.length(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\") 6 >>> grapheme.slice(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\", start=1, end=6) '\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea' This library includes 2 classes. GraphemeString is a class that supports all the functions made available by grapheme . The 2nd class Hebrew subclasses GraphemeString and adds methods for handling Hebrew text. This allows us to interact with the text like so: >> > from hebrew import Hebrew >> > v2 = Hebrew( \"\u05d5\u05b0\u05d4\u05b8\u05d0\u05b8\u0597\u05e8\u05b6\u05e5 \u05d4\u05b8\u05d9\u05b0\u05ea\u05b8\u05a5\u05d4 \u05ea\u05b9\u0599\u05d4\u05d5\u05bc\u0599 \u05d5\u05b8\u05d1\u05b9\u0594\u05d4\u05d5\u05bc \u05d5\u05b0\u05d7\u05b9\u0596\u05e9\u05c1\u05b6\u05da\u05b0 \u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a3\u05d9 \u05ea\u05b0\u05d4\u0591\u05d5\u05b9\u05dd \u05d5\u05b0\u05e8\u05a3\u05d5\u05bc\u05d7\u05b7 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u0594\u05d9\u05dd \u05de\u05b0\u05e8\u05b7\u05d7\u05b6\u0596\u05e4\u05b6\u05ea \u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9 \u05d4\u05b7\u05de\u05bc\u05b8\u05bd\u05d9\u05b4\u05dd\u05c3\") >> > v2.no_taamim() \u05d5\u05b0\u05d4\u05b8\u05d0\u05b8\u05e8\u05b6\u05e5 \u05d4\u05b8\u05d9\u05b0\u05ea\u05b8\u05d4 \u05ea\u05b9\u05d4\u05d5\u05bc \u05d5\u05b8\u05d1\u05b9\u05d4\u05d5\u05bc \u05d5\u05b0\u05d7\u05b9\u05e9\u05c1\u05b6\u05da\u05b0 \u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9 \u05ea\u05b0\u05d4\u05d5\u05b9\u05dd \u05d5\u05b0\u05e8\u05d5\u05bc\u05d7\u05b7 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u05d9\u05dd \u05de\u05b0\u05e8\u05b7\u05d7\u05b6\u05e4\u05b6\u05ea \u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9 \u05d4\u05b7\u05de\u05bc\u05b8\u05d9\u05b4\u05dd\u05c3 >> > v2.text_only() \u05d5\u05d4\u05d0\u05e8\u05e5 \u05d4\u05d9\u05ea\u05d4 \u05ea\u05d4\u05d5 \u05d5\u05d1\u05d4\u05d5 \u05d5\u05d7\u05e9\u05da \u05e2\u05dc\u05be\u05e4\u05e0\u05d9 \u05ea\u05d4\u05d5\u05dd \u05d5\u05e8\u05d5\u05d7 \u05d0\u05dc\u05d4\u05d9\u05dd \u05de\u05e8\u05d7\u05e4\u05ea \u05e2\u05dc\u05be\u05e4\u05e0\u05d9 \u05d4\u05de\u05d9\u05dd >> > v2.length 35 >> > v2.words(split_maqaf=True) [\u05d5\u05b0\u05d4\u05b8\u05d0\u05b8\u0597\u05e8\u05b6\u05e5, \u05d4\u05b8\u05d9\u05b0\u05ea\u05b8\u05a5\u05d4, \u05ea\u05b9\u0599\u05d4\u05d5\u05bc\u0599, \u05d5\u05b8\u05d1\u05b9\u0594\u05d4\u05d5\u05bc, \u05d5\u05b0\u05d7\u05b9\u0596\u05e9\u05c1\u05b6\u05da\u05b0, \u05e2\u05b7\u05dc, \u05e4\u05bc\u05b0\u05e0\u05b5\u05a3\u05d9, \u05ea\u05b0\u05d4\u0591\u05d5\u05b9\u05dd, \u05d5\u05b0\u05e8\u05a3\u05d5\u05bc\u05d7\u05b7, \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u0594\u05d9\u05dd, \u05de\u05b0\u05e8\u05b7\u05d7\u05b6\u0596\u05e4\u05b6\u05ea, \u05e2\u05b7\u05dc, \u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9, \u05d4\u05b7\u05de\u05bc\u05b8\u05bd\u05d9\u05b4\u05dd\u05c3] The text in these examples and used in testing were sourced from Sefaria . hebrew.chars and Character Constants hebrew.Chars contains constants for every letter as well as lists by character category's. Each value is an instance of a class that represents a character in the Hebrew character set with relevant properties. Since this library seeks to support the use of the Hebrew language in the way it is used, characters such as \"\u05d1\u05bc\" can be located ( BET ) even though, strictly speaking, \"\u05d1\u05bc\" is not part of the hebrew alphabet; it is a Hebrew letter plus a dot. >>> from hebrew.chars import FINAL_LETTERS, YIDDISH_CHARS, TSADI >>> TSADI HebrewChar(char='\u05e6', name='Tsadi', hebrew_name='\u05e6\u05b7\u05d3\u05b4\u05d9', name_alts=['Tzadik'], hebrew_name_alts=['\u05e6\u05d3\u05d9\u05e7'], final_letter=False) >>> {c.name: c.char for c in FINAL_LETTERS} {'Chaf Sofit': '\u05da', 'Mem Sofit': '\u05dd', 'Nun Sofit': '\u05df', 'Fe Sofit': '\u05e3', 'Tsadi Sofit': '\u05e5'} >>> [c.char for c in YIDDISH_CHARS] ['\u05f2', '\u05f0', '\u05f1'] A letter can be retrieved using the CHARS dict; A dict of all instances of all supported Char types where the key is the char and the value is an instance of BaseHebrewChar. >>> from hebrew.chars import CHARS >>> CHARS.get('\u05d1\u05bc') HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', name_alts=None, hebrew_name_alts=None, final_letter=False) Search is also supported so that letters can be retrieved by their name. >>> from hebrew.chars import HebrewChar >>> HebrewChar.search('bet') HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', name_alts=None, hebrew_name_alts=None, final_letter=False) Contributing Contributions in the form of pull requests are very welcome! I'm sure many more helpful methods related to hebrew text could be helpful. More information and instructions for contributing can be found here .","title":"Home"},{"location":"#installation","text":"$ pip install hebrew","title":"Installation"},{"location":"#example","text":"Hebrew assists in working with Hebrew text by providing methods to handle the text according to user-perceived characteristics. Additionally, methods for common Hebrew text processing are provided. >>> from hebrew import Hebrew >>> from hebrew.chars import HebrewChar, ALEPH >>> hs = Hebrew('\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea') >>> list(hs.graphemes) ['\u05d1\u05bc\u05b0', '\u05e8\u05b5', '\u05d0', '\u05e9\u05c1\u05b4\u0596', '\u05d9', '\u05ea'] >>> hs.text_only() \u05d1\u05e8\u05d0\u05e9\u05d9\u05ea >>> ALEPH HebrewChar(char='\u05d0', name='Aleph', hebrew_name='\u05d0\u05b8\u05dc\u05b6\u05e3', name_alts=['Alef'], hebrew_name_alts=None, final_letter=False) >>> HebrewChar.search('bet') HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', name_alts=None, hebrew_name_alts=None, final_letter=False)","title":"Example"},{"location":"#grapheme-characters","text":"Hebrew text comes in different forms, depending on the context. Hebrew text may appear with Niqqudot \"a system of diacritical signs used to represent vowels or distinguish between alternative pronunciations of letters of the Hebrew alphabet\". ^1 Additionally, Hebrew text may appear with extensive punctuation characters that connect words, separate them, and cantillation marks \"used as a guide for chanting the text, either from the printed text or, in the case of the public reading of the Torah\" ^2 . Because of the above, from the perspective of a hebrew reader, the following 3 words are the same: 1. \u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea 2. \u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u05d9\u05ea 3. \u05d1\u05e8\u05d0\u05e9\u05d9\u05ea However, as a unicode string, they are entirely different because of the additional characters. >>> len(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\") # 1 12 >>> len(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u05d9\u05ea\") # 2 11 >>> len(\"\u05d1\u05e8\u05d0\u05e9\u05d9\u05ea\") # 3 6 This impacts the user is a number of other ways. For example, if I want to get the root of this hebrew word using a slice: Expected: \u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea >>> he = \"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\" >>> he[-5:] '\u05c1\u05b4\u0596\u05d9\u05ea' The solution to this is to handle the unicode string as a list of grapheme ^3 characters, where each letter and its accompanying characters are treated as a single unit.","title":"Grapheme Characters"},{"location":"#working-with-grapheme-characters","text":"Using the grapheme library for python, we can work with the grapheme characters as units. This allows us to get the right number of characters, slice the string correctly, and more. >>> import grapheme >>> grapheme.length(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\") 6 >>> grapheme.slice(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea\", start=1, end=6) '\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea' This library includes 2 classes. GraphemeString is a class that supports all the functions made available by grapheme . The 2nd class Hebrew subclasses GraphemeString and adds methods for handling Hebrew text. This allows us to interact with the text like so: >> > from hebrew import Hebrew >> > v2 = Hebrew( \"\u05d5\u05b0\u05d4\u05b8\u05d0\u05b8\u0597\u05e8\u05b6\u05e5 \u05d4\u05b8\u05d9\u05b0\u05ea\u05b8\u05a5\u05d4 \u05ea\u05b9\u0599\u05d4\u05d5\u05bc\u0599 \u05d5\u05b8\u05d1\u05b9\u0594\u05d4\u05d5\u05bc \u05d5\u05b0\u05d7\u05b9\u0596\u05e9\u05c1\u05b6\u05da\u05b0 \u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a3\u05d9 \u05ea\u05b0\u05d4\u0591\u05d5\u05b9\u05dd \u05d5\u05b0\u05e8\u05a3\u05d5\u05bc\u05d7\u05b7 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u0594\u05d9\u05dd \u05de\u05b0\u05e8\u05b7\u05d7\u05b6\u0596\u05e4\u05b6\u05ea \u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9 \u05d4\u05b7\u05de\u05bc\u05b8\u05bd\u05d9\u05b4\u05dd\u05c3\") >> > v2.no_taamim() \u05d5\u05b0\u05d4\u05b8\u05d0\u05b8\u05e8\u05b6\u05e5 \u05d4\u05b8\u05d9\u05b0\u05ea\u05b8\u05d4 \u05ea\u05b9\u05d4\u05d5\u05bc \u05d5\u05b8\u05d1\u05b9\u05d4\u05d5\u05bc \u05d5\u05b0\u05d7\u05b9\u05e9\u05c1\u05b6\u05da\u05b0 \u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9 \u05ea\u05b0\u05d4\u05d5\u05b9\u05dd \u05d5\u05b0\u05e8\u05d5\u05bc\u05d7\u05b7 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u05d9\u05dd \u05de\u05b0\u05e8\u05b7\u05d7\u05b6\u05e4\u05b6\u05ea \u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9 \u05d4\u05b7\u05de\u05bc\u05b8\u05d9\u05b4\u05dd\u05c3 >> > v2.text_only() \u05d5\u05d4\u05d0\u05e8\u05e5 \u05d4\u05d9\u05ea\u05d4 \u05ea\u05d4\u05d5 \u05d5\u05d1\u05d4\u05d5 \u05d5\u05d7\u05e9\u05da \u05e2\u05dc\u05be\u05e4\u05e0\u05d9 \u05ea\u05d4\u05d5\u05dd \u05d5\u05e8\u05d5\u05d7 \u05d0\u05dc\u05d4\u05d9\u05dd \u05de\u05e8\u05d7\u05e4\u05ea \u05e2\u05dc\u05be\u05e4\u05e0\u05d9 \u05d4\u05de\u05d9\u05dd >> > v2.length 35 >> > v2.words(split_maqaf=True) [\u05d5\u05b0\u05d4\u05b8\u05d0\u05b8\u0597\u05e8\u05b6\u05e5, \u05d4\u05b8\u05d9\u05b0\u05ea\u05b8\u05a5\u05d4, \u05ea\u05b9\u0599\u05d4\u05d5\u05bc\u0599, \u05d5\u05b8\u05d1\u05b9\u0594\u05d4\u05d5\u05bc, \u05d5\u05b0\u05d7\u05b9\u0596\u05e9\u05c1\u05b6\u05da\u05b0, \u05e2\u05b7\u05dc, \u05e4\u05bc\u05b0\u05e0\u05b5\u05a3\u05d9, \u05ea\u05b0\u05d4\u0591\u05d5\u05b9\u05dd, \u05d5\u05b0\u05e8\u05a3\u05d5\u05bc\u05d7\u05b7, \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u0594\u05d9\u05dd, \u05de\u05b0\u05e8\u05b7\u05d7\u05b6\u0596\u05e4\u05b6\u05ea, \u05e2\u05b7\u05dc, \u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9, \u05d4\u05b7\u05de\u05bc\u05b8\u05bd\u05d9\u05b4\u05dd\u05c3] The text in these examples and used in testing were sourced from Sefaria .","title":"Working with Grapheme Characters"},{"location":"#hebrewchars-and-character-constants","text":"hebrew.Chars contains constants for every letter as well as lists by character category's. Each value is an instance of a class that represents a character in the Hebrew character set with relevant properties. Since this library seeks to support the use of the Hebrew language in the way it is used, characters such as \"\u05d1\u05bc\" can be located ( BET ) even though, strictly speaking, \"\u05d1\u05bc\" is not part of the hebrew alphabet; it is a Hebrew letter plus a dot. >>> from hebrew.chars import FINAL_LETTERS, YIDDISH_CHARS, TSADI >>> TSADI HebrewChar(char='\u05e6', name='Tsadi', hebrew_name='\u05e6\u05b7\u05d3\u05b4\u05d9', name_alts=['Tzadik'], hebrew_name_alts=['\u05e6\u05d3\u05d9\u05e7'], final_letter=False) >>> {c.name: c.char for c in FINAL_LETTERS} {'Chaf Sofit': '\u05da', 'Mem Sofit': '\u05dd', 'Nun Sofit': '\u05df', 'Fe Sofit': '\u05e3', 'Tsadi Sofit': '\u05e5'} >>> [c.char for c in YIDDISH_CHARS] ['\u05f2', '\u05f0', '\u05f1'] A letter can be retrieved using the CHARS dict; A dict of all instances of all supported Char types where the key is the char and the value is an instance of BaseHebrewChar. >>> from hebrew.chars import CHARS >>> CHARS.get('\u05d1\u05bc') HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', name_alts=None, hebrew_name_alts=None, final_letter=False) Search is also supported so that letters can be retrieved by their name. >>> from hebrew.chars import HebrewChar >>> HebrewChar.search('bet') HebrewChar(char='\u05d1\u05bc', name='Bet', hebrew_name='\u05d1\u05b5\u05bc\u05d9\u05ea', name_alts=None, hebrew_name_alts=None, final_letter=False)","title":"hebrew.chars and Character Constants"},{"location":"#contributing","text":"Contributions in the form of pull requests are very welcome! I'm sure many more helpful methods related to hebrew text could be helpful. More information and instructions for contributing can be found here .","title":"Contributing"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.5.3] - 2021-11-15 Changed Split the PunctuationChar type chars into TaamimChar and OtherChar types in hebrew.char . Renamed the no_punctuation method of Hebrew to no_taamim . [0.5.0] - 2021-11-14 Added Added the method Hebrew.gematria method for calculating the gematria of a string. Added mispar_hechrachi as a supported gematria type. >>> from hebrew import Hebrew >>> from hebrew.gematria import GematriaTypes >>> Hebrew(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea \u05d1\u05bc\u05b8\u05e8\u05b8\u05a3\u05d0 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u0591\u05d9\u05dd \u05d0\u05b5\u05a5\u05ea \u05d4\u05b7\u05e9\u05c1\u05bc\u05b8\u05de\u05b7\u0596\u05d9\u05b4\u05dd \u05d5\u05b0\u05d0\u05b5\u05a5\u05ea \u05d4\u05b8\u05d0\u05b8\u05e8\u05b6\u05e5\u05c3\").gematria(GematriaTypes.MISPAR_HECHRACHI) 2701 [0.4.0] - 2021-11-14 Added Added hebrew.chars with constants for Hebrew characters and classes to represent each letter. Moved constants out of Hebrew and into hebrew.chars . Constant values, previously strings, are now instances of a class with metadata for each letter. Removed Support for Python 3.6 was removed because we are now using @dataclasse . It is possible to make this work with 3.6 but I am choosing not to at this time. If this is a problem for you, feel free to open an issue. [0.3.0] - 2021-11-08 Changed Renamed the python package from hebrewstring to hebrew . [0.2.0] - 2021-11-07 Added Added the __eq__ method to the GraphemeString object. This is to support the == operator when comparing two GraphemeString objects. Added the __add__ method to the GraphemeString object. This is to support the + operator when adding two GraphemeString objects together. Added the __hash__ method to the GraphemeString object. This is to support the hash() function for a GraphemeString instance and allows it (as an example) to be used as a dict key. [0.1.2] - 2021-11-07 Added Added base code, tests, and examples for the first release.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#053-2021-11-15","text":"","title":"[0.5.3] - 2021-11-15"},{"location":"changelog/#changed","text":"Split the PunctuationChar type chars into TaamimChar and OtherChar types in hebrew.char . Renamed the no_punctuation method of Hebrew to no_taamim .","title":"Changed"},{"location":"changelog/#050-2021-11-14","text":"","title":"[0.5.0] - 2021-11-14"},{"location":"changelog/#added","text":"Added the method Hebrew.gematria method for calculating the gematria of a string. Added mispar_hechrachi as a supported gematria type. >>> from hebrew import Hebrew >>> from hebrew.gematria import GematriaTypes >>> Hebrew(\"\u05d1\u05bc\u05b0\u05e8\u05b5\u05d0\u05e9\u05c1\u05b4\u0596\u05d9\u05ea \u05d1\u05bc\u05b8\u05e8\u05b8\u05a3\u05d0 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u0591\u05d9\u05dd \u05d0\u05b5\u05a5\u05ea \u05d4\u05b7\u05e9\u05c1\u05bc\u05b8\u05de\u05b7\u0596\u05d9\u05b4\u05dd \u05d5\u05b0\u05d0\u05b5\u05a5\u05ea \u05d4\u05b8\u05d0\u05b8\u05e8\u05b6\u05e5\u05c3\").gematria(GematriaTypes.MISPAR_HECHRACHI) 2701","title":"Added"},{"location":"changelog/#040-2021-11-14","text":"","title":"[0.4.0] - 2021-11-14"},{"location":"changelog/#added_1","text":"Added hebrew.chars with constants for Hebrew characters and classes to represent each letter. Moved constants out of Hebrew and into hebrew.chars . Constant values, previously strings, are now instances of a class with metadata for each letter.","title":"Added"},{"location":"changelog/#removed","text":"Support for Python 3.6 was removed because we are now using @dataclasse . It is possible to make this work with 3.6 but I am choosing not to at this time. If this is a problem for you, feel free to open an issue.","title":"Removed"},{"location":"changelog/#030-2021-11-08","text":"","title":"[0.3.0] - 2021-11-08"},{"location":"changelog/#changed_1","text":"Renamed the python package from hebrewstring to hebrew .","title":"Changed"},{"location":"changelog/#020-2021-11-07","text":"","title":"[0.2.0] - 2021-11-07"},{"location":"changelog/#added_2","text":"Added the __eq__ method to the GraphemeString object. This is to support the == operator when comparing two GraphemeString objects. Added the __add__ method to the GraphemeString object. This is to support the + operator when adding two GraphemeString objects together. Added the __hash__ method to the GraphemeString object. This is to support the hash() function for a GraphemeString instance and allows it (as an example) to be used as a dict key.","title":"Added"},{"location":"changelog/#012-2021-11-07","text":"","title":"[0.1.2] - 2021-11-07"},{"location":"changelog/#added_3","text":"Added base code, tests, and examples for the first release.","title":"Added"},{"location":"contributing/","text":"Contributing to Hebrew This project welcomes contributions in the form of Pull Requests. For clear bug-fixes / typos etc. just submit a PR. For new features or if there is any doubt in how to fix a bug, you might want to open an issue prior to starting work. Development Environment Rich Tools uses poetry for packaging and dependency management. To start developing with Rich Tools, install Poetry using the recommended method or run: pip install poetry Once Poetry is installed, install the dependencies with the following command: poetry install Tests Run tests with the following command: poetry run pytest New code should ideally have tests and not break existing tests. If you are not familiar with writing tests but still want to contribute to this package, please feel free to submit your pull request, and I will work on tests. \ud83d\ude42 Type Checking Please add type annotations for all new code. Code Formatting Rich Tools uses black for code formatting. I recommend setting up black in your editor to format on save. To run black from the command line: black <path-to-files-changed>","title":"Contributing"},{"location":"contributing/#contributing-to-hebrew","text":"This project welcomes contributions in the form of Pull Requests. For clear bug-fixes / typos etc. just submit a PR. For new features or if there is any doubt in how to fix a bug, you might want to open an issue prior to starting work.","title":"Contributing to Hebrew"},{"location":"contributing/#development-environment","text":"Rich Tools uses poetry for packaging and dependency management. To start developing with Rich Tools, install Poetry using the recommended method or run: pip install poetry Once Poetry is installed, install the dependencies with the following command: poetry install","title":"Development Environment"},{"location":"contributing/#tests","text":"Run tests with the following command: poetry run pytest New code should ideally have tests and not break existing tests. If you are not familiar with writing tests but still want to contribute to this package, please feel free to submit your pull request, and I will work on tests. \ud83d\ude42","title":"Tests"},{"location":"contributing/#type-checking","text":"Please add type annotations for all new code.","title":"Type Checking"},{"location":"contributing/#code-formatting","text":"Rich Tools uses black for code formatting. I recommend setting up black in your editor to format on save. To run black from the command line: black <path-to-files-changed>","title":"Code Formatting"},{"location":"license/","text":"Copyright 2021 Avrohom Perl Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"docstrings/gematria/","text":"MISPAR_HECHRACHI A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the mispar_hechrachi gematria method as its value. GematriaTypes ( Enum ) Types of Gematria supported in this library.","title":"Gematria"},{"location":"docstrings/gematria/#hebrew.gematria.MISPAR_HECHRACHI","text":"A dictionary of values with each letter of the alphabet as a key, and the numerical value used in the mispar_hechrachi gematria method as its value.","title":"MISPAR_HECHRACHI"},{"location":"docstrings/gematria/#hebrew.gematria.GematriaTypes","text":"Types of Gematria supported in this library.","title":"GematriaTypes"},{"location":"docstrings/grapheme_string/","text":"GraphemeString An object that unifies the functions available from the grapheme library under an object. Functions all work as they do in the grapheme library, this is simply an interface. grapheme_lengths : Iterator [ int ] property readonly Returns an iterator of number of code points in each grapheme of the string. graphemes : Iterator [ grapheme . finder . GraphemeIterator ] property readonly Returns an iterator of all graphemes of given string. >>> rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\" >>> [codepoint for codepoint in rainbow_flag] ['\ud83c\udff3', '\ufe0f', '\u200d', '\ud83c\udf08'] >>> list(GraphemeString(\"multi codepoint grapheme: \" + rainbow_flag).graphemes) ['m', 'u', 'l', 't', 'i', ' ', 'c', 'o', 'd', 'e', 'p', 'o', 'i', 'n', 't', ' ', 'g', 'r', 'a', 'p', 'h', 'e', 'm', 'e', ':', ' ', '\ud83c\udff3\ufe0f\u200d\ud83c\udf08'] length : int property readonly Returns the number of graphemes in the string. Note that this functions needs to traverse the full string to calculate the length, unlike len(string) and it's time consumption is linear to the length of the string (up to the until value). Only counts up to the until argument, if given. This is useful when testing the length of a string against some limit and the excess length is not interesting. >>> rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\" >>> len(rainbow_flag) 4 >>> GraphemeString(rainbow_flag).length 1 contains ( self , substring ) Returns true if the sequence of graphemes in substring is also present in string. This differs from the normal python in operator, since the python operator will return true if the sequence of codepoints are withing the other string without considering grapheme boundaries. Performance notes: Very fast if substring not in string , since that also means that the same graphemes can not be in the two strings. Otherwise this function has linear time complexity in relation to the string length. It will traverse the sequence of graphemes until a match is found, so it will generally perform better for grapheme sequences that match early. >>> \"\ud83c\uddf8\ud83c\uddea\" in \"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\" True >>> GraphemeString(\"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\").contains(\"\ud83c\uddf8\ud83c\uddea\") False Source code in hebrew/grapheme_string.py def contains ( self , substring : str ) -> bool : \"\"\" Returns true if the sequence of graphemes in substring is also present in string. This differs from the normal python `in` operator, since the python operator will return true if the sequence of codepoints are withing the other string without considering grapheme boundaries. Performance notes: Very fast if `substring not in string`, since that also means that the same graphemes can not be in the two strings. Otherwise this function has linear time complexity in relation to the string length. It will traverse the sequence of graphemes until a match is found, so it will generally perform better for grapheme sequences that match early. ``` python >>> \"\ud83c\uddf8\ud83c\uddea\" in \"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\" True >>> GraphemeString(\"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\").contains(\"\ud83c\uddf8\ud83c\uddea\") False ``` \"\"\" return grapheme . contains ( self . string , substring ) endswith ( self , suffix ) Like str.endswith, but also checks that the string ends with the given prefixes sequence of graphemes. str.endswith may return true for a suffix that is not visually represented as a suffix if a grapheme cluster is initiated before the suffix starts. >>> GraphemeString(\"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\").endswith(\"\ud83c\udf08\") False >>> \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\".endswith(\"\ud83c\udf08\") True Source code in hebrew/grapheme_string.py def endswith ( self , suffix : str ) -> bool : \"\"\" Like str.endswith, but also checks that the string ends with the given prefixes sequence of graphemes. str.endswith may return true for a suffix that is not visually represented as a suffix if a grapheme cluster is initiated before the suffix starts. ``` python >>> GraphemeString(\"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\").endswith(\"\ud83c\udf08\") False >>> \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\".endswith(\"\ud83c\udf08\") True ``` \"\"\" return grapheme . endswith ( self . string , suffix ) get_length ( self , until ) Returns the number of graphemes in the string. Note that this functions needs to traverse the full string to calculate the length, unlike len(string) and it's time consumption is linear to the length of the string (up to the until value). Only counts up to the until argument, if given. This is useful when testing the length of a string against some limit and the excess length is not interesting. >>> rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\" >>> len(rainbow_flag) 4 >>> GraphemeString(rainbow_flag).length 1 >>> GraphemeString(\"\".join(str(i) for i in range(100))).get_length(30) 30 Source code in hebrew/grapheme_string.py def get_length ( self , until : int ) -> int : \"\"\" Returns the number of graphemes in the string. Note that this functions needs to traverse the full string to calculate the length, unlike `len(string)` and it's time consumption is linear to the length of the string (up to the `until` value). Only counts up to the `until` argument, if given. This is useful when testing the length of a string against some limit and the excess length is not interesting. ``` python >>> rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\" >>> len(rainbow_flag) 4 >>> GraphemeString(rainbow_flag).length 1 >>> GraphemeString(\"\".join(str(i) for i in range(100))).get_length(30) 30 ``` \"\"\" return grapheme . length ( self . string , until ) safe_split_index ( self , max_length ) Returns the highest index up to max_len at which the given string can be sliced, without breaking a grapheme. This is useful for when you want to split or take a substring from a string, and don't really care about the exact grapheme length, but don't want to risk breaking existing graphemes. This function does normally not traverse the full grapheme sequence up to the given length, so it can be used for arbitrarily long strings and high max_len s. However, some grapheme boundaries depend on the previous state, so the worst case performance is O(n). In practice, it's only very long non-broken sequences of country flags (represented as Regional Indicators) that will perform badly. The return value will always be between 0 and len(string) . >>> string = \"tamil \u0ba8\u0bbf (ni)\" >>> i = GraphemeString(string).safe_split_index(7) >>> i 6 >>> string[:i] 'tamil ' >>> string[i:] '\u0ba8\u0bbf (ni)' Source code in hebrew/grapheme_string.py def safe_split_index ( self , max_length : int ) -> int : \"\"\" Returns the highest index up to `max_len` at which the given string can be sliced, without breaking a grapheme. This is useful for when you want to split or take a substring from a string, and don't really care about the exact grapheme length, but don't want to risk breaking existing graphemes. This function does normally not traverse the full grapheme sequence up to the given length, so it can be used for arbitrarily long strings and high `max_len`s. However, some grapheme boundaries depend on the previous state, so the worst case performance is O(n). In practice, it's only very long non-broken sequences of country flags (represented as Regional Indicators) that will perform badly. The return value will always be between `0` and `len(string)`. ``` python >>> string = \"tamil \u0ba8\u0bbf (ni)\" >>> i = GraphemeString(string).safe_split_index(7) >>> i 6 >>> string[:i] 'tamil ' >>> string[i:] '\u0ba8\u0bbf (ni)' ``` \"\"\" return grapheme . safe_split_index ( self . string , max_length ) slice ( self , start = None , end = None ) Returns a substring of the given string, counting graphemes instead of codepoints. Negative indices is currently not supported. >>> string = \"tamil \u0ba8\u0bbf (ni)\" >>> string[:7] 'tamil \u0ba8' >>> GraphemeString(string).slice(end=7) 'tamil \u0ba8\u0bbf' >>> string[7:] '\u0bbf (ni)' >>> GraphemeString(string).slice(start=7) ' (ni)' Source code in hebrew/grapheme_string.py def slice ( self , start : int = None , end : int = None ) -> str : \"\"\" Returns a substring of the given string, counting graphemes instead of codepoints. Negative indices is currently not supported. ``` python >>> string = \"tamil \u0ba8\u0bbf (ni)\" >>> string[:7] 'tamil \u0ba8' >>> GraphemeString(string).slice(end=7) 'tamil \u0ba8\u0bbf' >>> string[7:] '\u0bbf (ni)' >>> GraphemeString(string).slice(start=7) ' (ni)' ``` \"\"\" return grapheme . slice ( self . string , start , end ) startswith ( self , prefix ) Like str.startswith, but also checks that the string starts with the given prefixes sequence of graphemes. str.startswith may return true for a prefix that is not visually represented as a prefix if a grapheme cluster is continued after the prefix ends. >>> GraphemeString(\"\u270a\ud83c\udffe\").startswith(\"\u270a\") False >>> \"\u270a\ud83c\udffe\".startswith(\"\u270a\") True Source code in hebrew/grapheme_string.py def startswith ( self , prefix : str ) -> bool : \"\"\" Like str.startswith, but also checks that the string starts with the given prefixes sequence of graphemes. str.startswith may return true for a prefix that is not visually represented as a prefix if a grapheme cluster is continued after the prefix ends. ``` python >>> GraphemeString(\"\u270a\ud83c\udffe\").startswith(\"\u270a\") False >>> \"\u270a\ud83c\udffe\".startswith(\"\u270a\") True ``` \"\"\" return grapheme . startswith ( self . string , prefix )","title":"Grapheme string"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString","text":"An object that unifies the functions available from the grapheme library under an object. Functions all work as they do in the grapheme library, this is simply an interface.","title":"GraphemeString"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString.grapheme_lengths","text":"Returns an iterator of number of code points in each grapheme of the string.","title":"grapheme_lengths"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString.graphemes","text":"Returns an iterator of all graphemes of given string. >>> rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\" >>> [codepoint for codepoint in rainbow_flag] ['\ud83c\udff3', '\ufe0f', '\u200d', '\ud83c\udf08'] >>> list(GraphemeString(\"multi codepoint grapheme: \" + rainbow_flag).graphemes) ['m', 'u', 'l', 't', 'i', ' ', 'c', 'o', 'd', 'e', 'p', 'o', 'i', 'n', 't', ' ', 'g', 'r', 'a', 'p', 'h', 'e', 'm', 'e', ':', ' ', '\ud83c\udff3\ufe0f\u200d\ud83c\udf08']","title":"graphemes"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString.length","text":"Returns the number of graphemes in the string. Note that this functions needs to traverse the full string to calculate the length, unlike len(string) and it's time consumption is linear to the length of the string (up to the until value). Only counts up to the until argument, if given. This is useful when testing the length of a string against some limit and the excess length is not interesting. >>> rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\" >>> len(rainbow_flag) 4 >>> GraphemeString(rainbow_flag).length 1","title":"length"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString.contains","text":"Returns true if the sequence of graphemes in substring is also present in string. This differs from the normal python in operator, since the python operator will return true if the sequence of codepoints are withing the other string without considering grapheme boundaries. Performance notes: Very fast if substring not in string , since that also means that the same graphemes can not be in the two strings. Otherwise this function has linear time complexity in relation to the string length. It will traverse the sequence of graphemes until a match is found, so it will generally perform better for grapheme sequences that match early. >>> \"\ud83c\uddf8\ud83c\uddea\" in \"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\" True >>> GraphemeString(\"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\").contains(\"\ud83c\uddf8\ud83c\uddea\") False Source code in hebrew/grapheme_string.py def contains ( self , substring : str ) -> bool : \"\"\" Returns true if the sequence of graphemes in substring is also present in string. This differs from the normal python `in` operator, since the python operator will return true if the sequence of codepoints are withing the other string without considering grapheme boundaries. Performance notes: Very fast if `substring not in string`, since that also means that the same graphemes can not be in the two strings. Otherwise this function has linear time complexity in relation to the string length. It will traverse the sequence of graphemes until a match is found, so it will generally perform better for grapheme sequences that match early. ``` python >>> \"\ud83c\uddf8\ud83c\uddea\" in \"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\" True >>> GraphemeString(\"\ud83c\uddea\ud83c\uddf8\ud83c\uddea\ud83c\uddea\").contains(\"\ud83c\uddf8\ud83c\uddea\") False ``` \"\"\" return grapheme . contains ( self . string , substring )","title":"contains()"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString.endswith","text":"Like str.endswith, but also checks that the string ends with the given prefixes sequence of graphemes. str.endswith may return true for a suffix that is not visually represented as a suffix if a grapheme cluster is initiated before the suffix starts. >>> GraphemeString(\"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\").endswith(\"\ud83c\udf08\") False >>> \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\".endswith(\"\ud83c\udf08\") True Source code in hebrew/grapheme_string.py def endswith ( self , suffix : str ) -> bool : \"\"\" Like str.endswith, but also checks that the string ends with the given prefixes sequence of graphemes. str.endswith may return true for a suffix that is not visually represented as a suffix if a grapheme cluster is initiated before the suffix starts. ``` python >>> GraphemeString(\"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\").endswith(\"\ud83c\udf08\") False >>> \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\".endswith(\"\ud83c\udf08\") True ``` \"\"\" return grapheme . endswith ( self . string , suffix )","title":"endswith()"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString.get_length","text":"Returns the number of graphemes in the string. Note that this functions needs to traverse the full string to calculate the length, unlike len(string) and it's time consumption is linear to the length of the string (up to the until value). Only counts up to the until argument, if given. This is useful when testing the length of a string against some limit and the excess length is not interesting. >>> rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\" >>> len(rainbow_flag) 4 >>> GraphemeString(rainbow_flag).length 1 >>> GraphemeString(\"\".join(str(i) for i in range(100))).get_length(30) 30 Source code in hebrew/grapheme_string.py def get_length ( self , until : int ) -> int : \"\"\" Returns the number of graphemes in the string. Note that this functions needs to traverse the full string to calculate the length, unlike `len(string)` and it's time consumption is linear to the length of the string (up to the `until` value). Only counts up to the `until` argument, if given. This is useful when testing the length of a string against some limit and the excess length is not interesting. ``` python >>> rainbow_flag = \"\ud83c\udff3\ufe0f\u200d\ud83c\udf08\" >>> len(rainbow_flag) 4 >>> GraphemeString(rainbow_flag).length 1 >>> GraphemeString(\"\".join(str(i) for i in range(100))).get_length(30) 30 ``` \"\"\" return grapheme . length ( self . string , until )","title":"get_length()"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString.safe_split_index","text":"Returns the highest index up to max_len at which the given string can be sliced, without breaking a grapheme. This is useful for when you want to split or take a substring from a string, and don't really care about the exact grapheme length, but don't want to risk breaking existing graphemes. This function does normally not traverse the full grapheme sequence up to the given length, so it can be used for arbitrarily long strings and high max_len s. However, some grapheme boundaries depend on the previous state, so the worst case performance is O(n). In practice, it's only very long non-broken sequences of country flags (represented as Regional Indicators) that will perform badly. The return value will always be between 0 and len(string) . >>> string = \"tamil \u0ba8\u0bbf (ni)\" >>> i = GraphemeString(string).safe_split_index(7) >>> i 6 >>> string[:i] 'tamil ' >>> string[i:] '\u0ba8\u0bbf (ni)' Source code in hebrew/grapheme_string.py def safe_split_index ( self , max_length : int ) -> int : \"\"\" Returns the highest index up to `max_len` at which the given string can be sliced, without breaking a grapheme. This is useful for when you want to split or take a substring from a string, and don't really care about the exact grapheme length, but don't want to risk breaking existing graphemes. This function does normally not traverse the full grapheme sequence up to the given length, so it can be used for arbitrarily long strings and high `max_len`s. However, some grapheme boundaries depend on the previous state, so the worst case performance is O(n). In practice, it's only very long non-broken sequences of country flags (represented as Regional Indicators) that will perform badly. The return value will always be between `0` and `len(string)`. ``` python >>> string = \"tamil \u0ba8\u0bbf (ni)\" >>> i = GraphemeString(string).safe_split_index(7) >>> i 6 >>> string[:i] 'tamil ' >>> string[i:] '\u0ba8\u0bbf (ni)' ``` \"\"\" return grapheme . safe_split_index ( self . string , max_length )","title":"safe_split_index()"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString.slice","text":"Returns a substring of the given string, counting graphemes instead of codepoints. Negative indices is currently not supported. >>> string = \"tamil \u0ba8\u0bbf (ni)\" >>> string[:7] 'tamil \u0ba8' >>> GraphemeString(string).slice(end=7) 'tamil \u0ba8\u0bbf' >>> string[7:] '\u0bbf (ni)' >>> GraphemeString(string).slice(start=7) ' (ni)' Source code in hebrew/grapheme_string.py def slice ( self , start : int = None , end : int = None ) -> str : \"\"\" Returns a substring of the given string, counting graphemes instead of codepoints. Negative indices is currently not supported. ``` python >>> string = \"tamil \u0ba8\u0bbf (ni)\" >>> string[:7] 'tamil \u0ba8' >>> GraphemeString(string).slice(end=7) 'tamil \u0ba8\u0bbf' >>> string[7:] '\u0bbf (ni)' >>> GraphemeString(string).slice(start=7) ' (ni)' ``` \"\"\" return grapheme . slice ( self . string , start , end )","title":"slice()"},{"location":"docstrings/grapheme_string/#hebrew.grapheme_string.GraphemeString.startswith","text":"Like str.startswith, but also checks that the string starts with the given prefixes sequence of graphemes. str.startswith may return true for a prefix that is not visually represented as a prefix if a grapheme cluster is continued after the prefix ends. >>> GraphemeString(\"\u270a\ud83c\udffe\").startswith(\"\u270a\") False >>> \"\u270a\ud83c\udffe\".startswith(\"\u270a\") True Source code in hebrew/grapheme_string.py def startswith ( self , prefix : str ) -> bool : \"\"\" Like str.startswith, but also checks that the string starts with the given prefixes sequence of graphemes. str.startswith may return true for a prefix that is not visually represented as a prefix if a grapheme cluster is continued after the prefix ends. ``` python >>> GraphemeString(\"\u270a\ud83c\udffe\").startswith(\"\u270a\") False >>> \"\u270a\ud83c\udffe\".startswith(\"\u270a\") True ``` \"\"\" return grapheme . startswith ( self . string , prefix )","title":"startswith()"},{"location":"docstrings/hebrew/","text":"Hebrew ( GraphemeString ) A class representing a Hebrew String. A Hebrew string can contain pure Hebrew letters, or can be composed of any additional characters. gematria ( self , method =< GematriaTypes . MISPAR_HECHRACHI : 'mispar_hechrachi' > ) Returns the gematria of the string. Parameters: Name Type Description Default method GematriaTypes The method to use for calculating the gematria. <GematriaTypes.MISPAR_HECHRACHI: 'mispar_hechrachi'> Returns: Type Description int Source code in hebrew/hebrew_obj.py def gematria ( self , method : GematriaTypes = GematriaTypes . MISPAR_HECHRACHI ) -> int : \"\"\" Returns the gematria of the string. :param method: The method to use for calculating the gematria. :return: \"\"\" chars = [ CHARS [ c ] for c in self . string if CHARS . get ( c ) and hasattr ( CHARS [ c ], method . value ) ] return reduce ( add , [ getattr ( c , method . value ) for c in chars ]) no_maqaf ( self ) Replaces all maqafs with spaces. This is useful for splitting a string into words when you want words connected by maqafs to be considered as one word. Example: You may think of \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" as one word in some cases but want to split it into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" in other cases. Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def no_maqaf ( self ) -> HebrewT : \"\"\" Replaces all maqafs with spaces. This is useful for splitting a string into words when you want words connected by maqafs to be considered as one word. Example: You may think of \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" as one word in some cases but want to split it into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" in other cases. :return: \"\"\" return Hebrew ( self . string . replace ( MAQAF . char , \" \" )) no_niqqud ( self ) Removes all niqqud characters. This may be useful to practice reading from the torah. Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def no_niqqud ( self ) -> HebrewT : \"\"\" Removes all niqqud characters. This may be useful to practice reading from the torah. :return: \"\"\" string = self . string for char in [ c . char for c in NIQQUD_CHARS ]: string = string . replace ( char , \"\" ) return Hebrew ( string ) no_sof_passuk ( self ) Removes all sof_passuk chars. Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def no_sof_passuk ( self ) -> HebrewT : \"\"\" Removes all sof_passuk chars. :return: \"\"\" return Hebrew ( self . string . replace ( SOF_PASSUK . char , \"\" )) no_taamim ( self , remove_maqaf = False , remove_sof_passuk = False ) Removes all Ta'amim characters. Result is a string with just letters and Niqqud characters. Parameters: Name Type Description Default remove_maqaf bool Whether to remove the maqaf characters if they are encountered. False remove_sof_passuk bool Whether to remove the remove_sof_passuk character if they are encountered. False Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def no_taamim ( self , remove_maqaf : bool = False , remove_sof_passuk : bool = False ) -> HebrewT : \"\"\" Removes all [Ta'amim](https://en.wikipedia.org/wiki/Hebrew_cantillation) characters. Result is a string with just letters and Niqqud characters. :param remove_maqaf: Whether to remove the maqaf characters if they are encountered. :param remove_sof_passuk: Whether to remove the remove_sof_passuk character if they are encountered. :return: \"\"\" string = self . no_maqaf () . string if remove_maqaf else self . string string = Hebrew ( string ) . no_sof_passuk () . string if remove_sof_passuk else string chars_to_remove = [ p . char for p in TAAMIM_CHARS if p not in ( MAQAF , PASEQ , SOF_PASSUK ) ] string = string . replace ( f \" { PASEQ . char } \" , \" \" ) # Handled separately to avoid double spaces. for char in chars_to_remove : string = string . replace ( char , \"\" ) return Hebrew ( string ) text_only ( self , remove_maqaf = False ) Returns a string with all non-letter characters removed. This will remove both niqqud and punctuation. Parameters: Name Type Description Default remove_maqaf bool Whether to remove the maqaf characters if they are encountered False Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def text_only ( self , remove_maqaf : bool = False ) -> HebrewT : \"\"\" Returns a string with all non-letter characters removed. This will remove both niqqud and punctuation. :param remove_maqaf: Whether to remove the maqaf characters if they are encountered :return: \"\"\" string = self . no_maqaf () . string if remove_maqaf else self . string chars_to_remove = [ c . char for c in _NON_LETTER_CHARS if c not in ( MAQAF , PASEQ )] string = string . replace ( f \" { PASEQ . char } \" , \" \" ) # Handled separately to avoid double spaces. for char in chars_to_remove : string = string . replace ( char , \"\" ) return Hebrew ( string ) words ( self , split_maqaf = False ) Splits the string into a list of words. Parameters: Name Type Description Default split_maqaf bool Whether to split a single word such as \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" when a maqaf is encountered. False Returns: Type Description List[~HebrewT] Source code in hebrew/hebrew_obj.py def words ( self , split_maqaf : bool = False ) -> List [ HebrewT ]: \"\"\" Splits the string into a list of words. :param split_maqaf: Whether to split a single word such as \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" when a maqaf is encountered. :return: \"\"\" string = self . string if not split_maqaf else self . no_maqaf () . string return [ Hebrew ( s ) for s in string . split ()]","title":"Hebrew"},{"location":"docstrings/hebrew/#hebrew.hebrew_obj.Hebrew","text":"A class representing a Hebrew String. A Hebrew string can contain pure Hebrew letters, or can be composed of any additional characters.","title":"Hebrew"},{"location":"docstrings/hebrew/#hebrew.hebrew_obj.Hebrew.gematria","text":"Returns the gematria of the string. Parameters: Name Type Description Default method GematriaTypes The method to use for calculating the gematria. <GematriaTypes.MISPAR_HECHRACHI: 'mispar_hechrachi'> Returns: Type Description int Source code in hebrew/hebrew_obj.py def gematria ( self , method : GematriaTypes = GematriaTypes . MISPAR_HECHRACHI ) -> int : \"\"\" Returns the gematria of the string. :param method: The method to use for calculating the gematria. :return: \"\"\" chars = [ CHARS [ c ] for c in self . string if CHARS . get ( c ) and hasattr ( CHARS [ c ], method . value ) ] return reduce ( add , [ getattr ( c , method . value ) for c in chars ])","title":"gematria()"},{"location":"docstrings/hebrew/#hebrew.hebrew_obj.Hebrew.no_maqaf","text":"Replaces all maqafs with spaces. This is useful for splitting a string into words when you want words connected by maqafs to be considered as one word. Example: You may think of \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" as one word in some cases but want to split it into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" in other cases. Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def no_maqaf ( self ) -> HebrewT : \"\"\" Replaces all maqafs with spaces. This is useful for splitting a string into words when you want words connected by maqafs to be considered as one word. Example: You may think of \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" as one word in some cases but want to split it into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" in other cases. :return: \"\"\" return Hebrew ( self . string . replace ( MAQAF . char , \" \" ))","title":"no_maqaf()"},{"location":"docstrings/hebrew/#hebrew.hebrew_obj.Hebrew.no_niqqud","text":"Removes all niqqud characters. This may be useful to practice reading from the torah. Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def no_niqqud ( self ) -> HebrewT : \"\"\" Removes all niqqud characters. This may be useful to practice reading from the torah. :return: \"\"\" string = self . string for char in [ c . char for c in NIQQUD_CHARS ]: string = string . replace ( char , \"\" ) return Hebrew ( string )","title":"no_niqqud()"},{"location":"docstrings/hebrew/#hebrew.hebrew_obj.Hebrew.no_sof_passuk","text":"Removes all sof_passuk chars. Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def no_sof_passuk ( self ) -> HebrewT : \"\"\" Removes all sof_passuk chars. :return: \"\"\" return Hebrew ( self . string . replace ( SOF_PASSUK . char , \"\" ))","title":"no_sof_passuk()"},{"location":"docstrings/hebrew/#hebrew.hebrew_obj.Hebrew.no_taamim","text":"Removes all Ta'amim characters. Result is a string with just letters and Niqqud characters. Parameters: Name Type Description Default remove_maqaf bool Whether to remove the maqaf characters if they are encountered. False remove_sof_passuk bool Whether to remove the remove_sof_passuk character if they are encountered. False Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def no_taamim ( self , remove_maqaf : bool = False , remove_sof_passuk : bool = False ) -> HebrewT : \"\"\" Removes all [Ta'amim](https://en.wikipedia.org/wiki/Hebrew_cantillation) characters. Result is a string with just letters and Niqqud characters. :param remove_maqaf: Whether to remove the maqaf characters if they are encountered. :param remove_sof_passuk: Whether to remove the remove_sof_passuk character if they are encountered. :return: \"\"\" string = self . no_maqaf () . string if remove_maqaf else self . string string = Hebrew ( string ) . no_sof_passuk () . string if remove_sof_passuk else string chars_to_remove = [ p . char for p in TAAMIM_CHARS if p not in ( MAQAF , PASEQ , SOF_PASSUK ) ] string = string . replace ( f \" { PASEQ . char } \" , \" \" ) # Handled separately to avoid double spaces. for char in chars_to_remove : string = string . replace ( char , \"\" ) return Hebrew ( string )","title":"no_taamim()"},{"location":"docstrings/hebrew/#hebrew.hebrew_obj.Hebrew.text_only","text":"Returns a string with all non-letter characters removed. This will remove both niqqud and punctuation. Parameters: Name Type Description Default remove_maqaf bool Whether to remove the maqaf characters if they are encountered False Returns: Type Description ~HebrewT Source code in hebrew/hebrew_obj.py def text_only ( self , remove_maqaf : bool = False ) -> HebrewT : \"\"\" Returns a string with all non-letter characters removed. This will remove both niqqud and punctuation. :param remove_maqaf: Whether to remove the maqaf characters if they are encountered :return: \"\"\" string = self . no_maqaf () . string if remove_maqaf else self . string chars_to_remove = [ c . char for c in _NON_LETTER_CHARS if c not in ( MAQAF , PASEQ )] string = string . replace ( f \" { PASEQ . char } \" , \" \" ) # Handled separately to avoid double spaces. for char in chars_to_remove : string = string . replace ( char , \"\" ) return Hebrew ( string )","title":"text_only()"},{"location":"docstrings/hebrew/#hebrew.hebrew_obj.Hebrew.words","text":"Splits the string into a list of words. Parameters: Name Type Description Default split_maqaf bool Whether to split a single word such as \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" when a maqaf is encountered. False Returns: Type Description List[~HebrewT] Source code in hebrew/hebrew_obj.py def words ( self , split_maqaf : bool = False ) -> List [ HebrewT ]: \"\"\" Splits the string into a list of words. :param split_maqaf: Whether to split a single word such as \"\u05e2\u05b7\u05dc\u05be\u05e4\u05bc\u05b0\u05e0\u05b5\u05a5\u05d9\" into \"\u05e2\u05b7\u05dc\" and \"\u05e4\u05bc\u05b0\u05e0\u05b5\u05d9\" when a maqaf is encountered. :return: \"\"\" string = self . string if not split_maqaf else self . no_maqaf () . string return [ Hebrew ( s ) for s in string . split ()]","title":"words()"},{"location":"docstrings/chars/classes_and_functions/","text":"Constants for each Hebrew character and classes to represent them, and metadata about them. BaseHebrewChar dataclass Base class with the metadata that all Hebrew characters share. This class should be used internally by hebrew.Chars only. char : str dataclass-field Unicode character(s) for this class instance. hebrew_name : Optional [ str ] dataclass-field Primary name of the character in Hebrew. hebrew_name_alts : Optional [ List [ str ]] dataclass-field Alternative names of the character in Hebrew. hebrew_names : List [ str ] property readonly All Hebrew names for this character. Returns: Type Description List[str] A list of all Hebrew names for this character made up of the hebrew_name and hebrew_name_alts . name : str dataclass-field Primary name of the character in English. name_alts : Optional [ List [ str ]] dataclass-field Alternative names of the character in English. names : List [ str ] property readonly All english names for this character. Returns: Type Description List[str] A list of all english names for this character made up of the name and name_alts . HebrewChar ( BaseHebrewChar ) dataclass A class representing characters that are part of the Hebrew alphabet (to the exclusion of Nekuds, etc). base_letter : HebrewChar property readonly Returns the base letter of the character. This library provides HebrewChar values for both standard Hebrew letters and user-perceived letters such as \"\u05d1\u05bc\". This property will always return the base letter of the HebrewChar instance, in the above example, \"\u05d1\". Returns: Type Description HebrewChar An instance of HebrewChar representing a single unicode character; the base letter of this instance of HebrewChar . final_letter : bool dataclass-field Whether or not the letter is a \"final\" or \"Sofit\" letter. mispar_hechrachi : int property readonly Returns: Type Description int The value of the character for use in the mispar_hechrachi method of gematria. search ( char_name ) classmethod Searches for an instance of HebrewChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[HebrewChar] An instance of HebrewChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"HebrewChar\" ]: \"\"\" Searches for an instance of `HebrewChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `HebrewChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , HEBREW_CHARS ) NiqqudChar ( BaseHebrewChar ) dataclass A class representing Niqqud characters used in Hebrew and Yiddish text. search ( char_name ) classmethod Searches for an instance of NiqqudChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[NiqqudChar] An instance of NiqqudChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"NiqqudChar\" ]: \"\"\" Searches for an instance of `NiqqudChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `NiqqudChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , NIQQUD_CHARS ) OtherChar ( BaseHebrewChar ) dataclass A class representing the \"other\" or \"uncharacterized\" characters used in Hebrew (and Yiddish) text. search ( char_name ) classmethod Searches for an instance of TaamimChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[OtherChar] An instance of OtherChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"OtherChar\" ]: \"\"\" Searches for an instance of `TaamimChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `OtherChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , OTHER_CHARS ) TaamimChar ( BaseHebrewChar ) dataclass A class representing the \"Trup\" or Hebrew cantillation characters used alongside Hebrew letters. search ( char_name ) classmethod Searches for an instance of TaamimChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[TaamimChar] An instance of TaamimChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"TaamimChar\" ]: \"\"\" Searches for an instance of `TaamimChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `TaamimChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , TAAMIM_CHARS ) YiddishChar ( BaseHebrewChar ) dataclass A class representing special characters used in Yiddish text. search ( char_name ) classmethod Searches for an instance of YiddishChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[YiddishChar] An instance of YiddishChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"YiddishChar\" ]: \"\"\" Searches for an instance of `YiddishChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `YiddishChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , YIDDISH_CHARS ) char_search ( char_name , char_list = None ) Search for a character by its name. Character classes contain alternate names which are supported by this function! Currently, only english names are supported. TODO: Support search in hebrew, which will need to support hebrew text with or without nikud. Parameters: Name Type Description Default char_name str A string containing the name of the character to search for. required char_list Optional[List[Union[hebrew.chars.HebrewChar, hebrew.chars.YiddishChar, hebrew.chars.NiqqudChar, hebrew.chars.TaamimChar, hebrew.chars.OtherChar]]] A list of BaseHebrewChar characters to use for this search. When None, defaults to all characters (ALL_CHARS). None Returns: Type Description Union[hebrew.chars.HebrewChar, hebrew.chars.YiddishChar, hebrew.chars.NiqqudChar, hebrew.chars.TaamimChar, hebrew.chars.OtherChar] Source code in hebrew/chars.py def char_search ( char_name : str , char_list : Optional [ List [ Union [ HebrewChar , YiddishChar , NiqqudChar , TaamimChar , OtherChar ]] ] = None , ) -> Optional [ Union [ HebrewChar , YiddishChar , NiqqudChar , TaamimChar , OtherChar ]]: \"\"\" Search for a character by its name. Character classes contain alternate names which are supported by this function! Currently, only english names are supported. TODO: Support search in hebrew, which will need to support hebrew text with or without nikud. :param char_name: A string containing the name of the character to search for. :param char_list: A list of `BaseHebrewChar` characters to use for this search. When None, defaults to all characters (ALL_CHARS). :return: \"\"\" char_list = char_list if char_list else ALL_CHARS for char in char_list : if char_name . lower () in [ n . lower () for n in char . names ]: return CHARS [ char . char ] return None","title":"Classes and functions"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar","text":"Base class with the metadata that all Hebrew characters share. This class should be used internally by hebrew.Chars only.","title":"BaseHebrewChar"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.char","text":"Unicode character(s) for this class instance.","title":"char"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.hebrew_name","text":"Primary name of the character in Hebrew.","title":"hebrew_name"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.hebrew_name_alts","text":"Alternative names of the character in Hebrew.","title":"hebrew_name_alts"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.hebrew_names","text":"All Hebrew names for this character. Returns: Type Description List[str] A list of all Hebrew names for this character made up of the hebrew_name and hebrew_name_alts .","title":"hebrew_names"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.name","text":"Primary name of the character in English.","title":"name"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.name_alts","text":"Alternative names of the character in English.","title":"name_alts"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.BaseHebrewChar.names","text":"All english names for this character. Returns: Type Description List[str] A list of all english names for this character made up of the name and name_alts .","title":"names"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.HebrewChar","text":"A class representing characters that are part of the Hebrew alphabet (to the exclusion of Nekuds, etc).","title":"HebrewChar"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.HebrewChar.base_letter","text":"Returns the base letter of the character. This library provides HebrewChar values for both standard Hebrew letters and user-perceived letters such as \"\u05d1\u05bc\". This property will always return the base letter of the HebrewChar instance, in the above example, \"\u05d1\". Returns: Type Description HebrewChar An instance of HebrewChar representing a single unicode character; the base letter of this instance of HebrewChar .","title":"base_letter"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.HebrewChar.final_letter","text":"Whether or not the letter is a \"final\" or \"Sofit\" letter.","title":"final_letter"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.HebrewChar.mispar_hechrachi","text":"Returns: Type Description int The value of the character for use in the mispar_hechrachi method of gematria.","title":"mispar_hechrachi"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.HebrewChar.search","text":"Searches for an instance of HebrewChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[HebrewChar] An instance of HebrewChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"HebrewChar\" ]: \"\"\" Searches for an instance of `HebrewChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `HebrewChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , HEBREW_CHARS )","title":"search()"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.NiqqudChar","text":"A class representing Niqqud characters used in Hebrew and Yiddish text.","title":"NiqqudChar"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.NiqqudChar.search","text":"Searches for an instance of NiqqudChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[NiqqudChar] An instance of NiqqudChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"NiqqudChar\" ]: \"\"\" Searches for an instance of `NiqqudChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `NiqqudChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , NIQQUD_CHARS )","title":"search()"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.OtherChar","text":"A class representing the \"other\" or \"uncharacterized\" characters used in Hebrew (and Yiddish) text.","title":"OtherChar"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.OtherChar.search","text":"Searches for an instance of TaamimChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[OtherChar] An instance of OtherChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"OtherChar\" ]: \"\"\" Searches for an instance of `TaamimChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `OtherChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , OTHER_CHARS )","title":"search()"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.TaamimChar","text":"A class representing the \"Trup\" or Hebrew cantillation characters used alongside Hebrew letters.","title":"TaamimChar"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.TaamimChar.search","text":"Searches for an instance of TaamimChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[TaamimChar] An instance of TaamimChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"TaamimChar\" ]: \"\"\" Searches for an instance of `TaamimChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `TaamimChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , TAAMIM_CHARS )","title":"search()"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.YiddishChar","text":"A class representing special characters used in Yiddish text.","title":"YiddishChar"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.YiddishChar.search","text":"Searches for an instance of YiddishChar by name. The search input is case insensitive and is compared to names list for this search. To search for any Hebrew character, use hebrew.chars.char_search . Parameters: Name Type Description Default char_name str A single string representing the name of the character to search for. required Returns: Type Description Optional[YiddishChar] An instance of YiddishChar representing the character with the given name, or None if no character is found. Source code in hebrew/chars.py @classmethod def search ( cls , char_name : str ) -> Optional [ \"YiddishChar\" ]: \"\"\" Searches for an instance of `YiddishChar` by name. The search input is case insensitive and is compared to `names` list for this search. To search for any Hebrew character, use `hebrew.chars.char_search`. :param char_name: A single string representing the name of the character to search for. :return: An instance of `YiddishChar` representing the character with the given name, or `None` if no character is found. \"\"\" return char_search ( char_name , YIDDISH_CHARS )","title":"search()"},{"location":"docstrings/chars/classes_and_functions/#hebrew.chars.char_search","text":"Search for a character by its name. Character classes contain alternate names which are supported by this function! Currently, only english names are supported. TODO: Support search in hebrew, which will need to support hebrew text with or without nikud. Parameters: Name Type Description Default char_name str A string containing the name of the character to search for. required char_list Optional[List[Union[hebrew.chars.HebrewChar, hebrew.chars.YiddishChar, hebrew.chars.NiqqudChar, hebrew.chars.TaamimChar, hebrew.chars.OtherChar]]] A list of BaseHebrewChar characters to use for this search. When None, defaults to all characters (ALL_CHARS). None Returns: Type Description Union[hebrew.chars.HebrewChar, hebrew.chars.YiddishChar, hebrew.chars.NiqqudChar, hebrew.chars.TaamimChar, hebrew.chars.OtherChar] Source code in hebrew/chars.py def char_search ( char_name : str , char_list : Optional [ List [ Union [ HebrewChar , YiddishChar , NiqqudChar , TaamimChar , OtherChar ]] ] = None , ) -> Optional [ Union [ HebrewChar , YiddishChar , NiqqudChar , TaamimChar , OtherChar ]]: \"\"\" Search for a character by its name. Character classes contain alternate names which are supported by this function! Currently, only english names are supported. TODO: Support search in hebrew, which will need to support hebrew text with or without nikud. :param char_name: A string containing the name of the character to search for. :param char_list: A list of `BaseHebrewChar` characters to use for this search. When None, defaults to all characters (ALL_CHARS). :return: \"\"\" char_list = char_list if char_list else ALL_CHARS for char in char_list : if char_name . lower () in [ n . lower () for n in char . names ]: return CHARS [ char . char ] return None","title":"char_search()"},{"location":"docstrings/chars/constants/","text":"Constants for each Hebrew character and classes to represent them, and metadata about them. ALEF_MAPIQ An instance of HebrewChar representing the letter '\ufb30' . This is a rarely used special character. ALEF_PATAH An instance of HebrewChar representing the letter '\ufb2e' . This is a rarely used special character. ALEF_QAMATZ An instance of HebrewChar representing the letter '\ufb2f' . This is a rarely used special character. ALEF_WIDE An instance of HebrewChar representing the letter '\ufb21' . This is a rarely used special character. ALEPH An instance of HebrewChar representing the letter '\u05d0' ALEPH_LAMED An instance of HebrewChar representing the letter '\ufb4f' . This is a rarely used special character. ALEPH_SYMBOL An instance of HebrewChar representing the letter '\u2135' . This is a rarely used special character. ALL_CHARS : List [ Union [ hebrew . chars . HebrewChar , hebrew . chars . YiddishChar , hebrew . chars . NiqqudChar , hebrew . chars . TaamimChar , hebrew . chars . OtherChar ]] Every instance of a character class. This is used for defining collections with list comprehensions based on the Chars metadata. It can be relied on as being a complete list of Unicode characters used in Hebrew (and Yiddish etc). ALTERNATIVE_PLUS_SIGN An instance of OtherChar representing the character '\ufb29' . ATNAH_HAFUKH An instance of TaamimChar representing the Ta'amim '\u05a2' . AYIN An instance of HebrewChar representing the letter '\u05e2' . AYIN_ALT An instance of HebrewChar representing the letter '\ufb20' . This is a rarely used special character. AZLA_GERESH An instance of TaamimChar representing the Ta'amim '\u059c' . BES Simple pointer to BET . BET An instance of HebrewChar representing the letter '\u05d1\u05bc' . This is not strictly a letter, but is included because it is often treated as one. BET_DAGESH An instance of HebrewChar representing the letter '\ufb31' . This is a rarely used special character. BET_RAFE An instance of HebrewChar representing the letter '\ufb4c' . This is a rarely used special character. BET_SYMBOL An instance of HebrewChar representing the letter '\u2136' . This is a rarely used special character. CAF An instance of HebrewChar representing the letter '\u05db\u05bc' . This is not strictly a letter, but is included because it is often treated as one. CHAF An instance of HebrewChar representing the letter '\u05db' . CHAF_SOFIT An instance of HebrewChar representing the letter '\u05da' . CHARS : Dict [ str , Union [ hebrew . chars . HebrewChar , hebrew . chars . YiddishChar , hebrew . chars . NiqqudChar , hebrew . chars . TaamimChar , hebrew . chars . OtherChar ]] A dict of all instances of all supported Char types where the key is the char and the value is an instance of BaseHebrewChar. This is useful for when you have a hebrew char and want to get its metadata class. assert CHARS['\u05d0'] == ALEPH CHES Simple pointer to CHET . CHET An instance of HebrewChar representing the letter '\u05d6' . CHIRIK Simple pointer to HIRIQ DAGESH An instance of NiqqudChar representing the Niqqud '\u05bc' . DALED Simple pointer to DALET . DALET An instance of HebrewChar representing the letter '\u05d3' . DALET_DAGESH An instance of HebrewChar representing the letter '\ufb33' . This is a rarely used special character. DALET_SYMBOL An instance of HebrewChar representing the letter '\u2138' . This is a rarely used special character. DALET_WIDE An instance of HebrewChar representing the letter '\ufb22' . This is a rarely used special character. DARGA An instance of TaamimChar representing the Ta'amim '\u05a7' . DEHI An instance of TaamimChar representing the Ta'amim '\u05ad' . DOUBLE_VAV An instance of YiddishChar representing the letter '\u05f0' . DOUBLE_VUV Simple pointer to DOUBLE_VAV . DOUBLE_YOD An instance of YiddishChar representing the letter '\u05f2' . DOUBLE_YUD Simple pointer to DOUBLE_YOD . ETNAHTA An instance of TaamimChar representing the Ta'amim '\u0591' . FE An instance of HebrewChar representing the letter '\u05e4' . FE_SOFIT An instance of HebrewChar representing the letter '\u05e3' . FINAL_CHAF Simple pointer to CHAF_SOFIT . FINAL_FE Simple pointer to FE_SOFIT . FINAL_KAF Simple pointer to KAF_SOFIT . FINAL_KAF_DAGESH An instance of HebrewChar representing the letter '\ufb3a' . This is a rarely used special character. FINAL_LETTERS : List [ hebrew . chars . HebrewChar ] A list of all Hebrew characters that are final letters. While we do have letters like '\u05e3\u05bc' defined, they do not return in this array; it contains only the plain final letters. FINAL_MEM Simple pointer to MEM_SOFIT . FINAL_MEM_WIDE An instance of HebrewChar representing the letter '\ufb26' . This is a rarely used special character. FINAL_NUN Simple pointer to NUN_SOFIT . FINAL_PE Simple pointer to PE_SOFIT . FINAL_PE_DAGESH An instance of HebrewChar representing the letter '\ufb43' . This is a rarely used special character. FINAL_TSADI Simple pointer to TSADI_SOFIT . FINAL_TZADIK Simple pointer to TSADI_SOFIT . GERESH An instance of OtherChar representing the character '\u05f3' . GERESH_MUQDAM An instance of TaamimChar representing the Ta'amim '\u059d' . GERSHAYIM An instance of OtherChar representing the character '\u05f4' . GERSHAYIM_2 An instance of TaamimChar representing the Ta'amim '\u059e' . GIMEL An instance of HebrewChar representing the letter '\u05d2' . GIMEL_DAGESH An instance of HebrewChar representing the letter '\ufb32' . This is a rarely used special character. GIMEL_SYMBOL An instance of HebrewChar representing the letter '\u2137' . This is a rarely used special character. HATAF_PATAH An instance of NiqqudChar representing the Niqqud '\u05b2' . HATAF_QAMATS An instance of NiqqudChar representing the Niqqud '\u05b3' . HATAF_SEGOL An instance of NiqqudChar representing the Niqqud '\u05b1' . HE An instance of HebrewChar representing the letter '\u05d4' . HEBREW_CHARS : List [ hebrew . chars . HebrewChar ] A List of all instances of HebrewChar . This will include letters like '\u05e3\u05bc' HEI Simple pointer to HE . HET Simple pointer to CHET . HEY Simple pointer to HE . HE_MAPIQ An instance of HebrewChar representing the letter '\ufb34' . This is a rarely used special character. HE_WIDE An instance of HebrewChar representing the letter '\ufb23' . This is a rarely used special character. HIRIQ An instance of NiqqudChar representing the Niqqud '\u05b4' . HOLAM An instance of NiqqudChar representing the Niqqud '\u05b9' . HOLAM_HASER An instance of NiqqudChar representing the Niqqud '\u05ba' . ILUY An instance of TaamimChar representing the Ta'amim '\u05ac' . INVERTED_NUN An instance of OtherChar representing the letter '\u05c6' . This is a rarely used special character. JUDEO_SPANISH_VARIKA An instance of TaamimChar representing the Ta'amim '\ufb1e' . KAF_DAGESH An instance of HebrewChar representing the letter '\ufb3b' . This is a rarely used special character. KAF_RAFE An instance of HebrewChar representing the letter '\ufb4d' . This is a rarely used special character. KAF_SOFIT An instance of HebrewChar representing the letter '\u05da\u05bc' . This is not strictly a letter, but is included because it is often treated as one. KAF_WIDE An instance of HebrewChar representing the letter '\ufb24' . This is a rarely used special character. KUBUTZ Simple pointer to QUBUTS KUF Simple pointer to TSADI_SOFIT . KUMATZ Simple pointer to QAMATS LAMED An instance of HebrewChar representing the letter '\u05dc' . LAMED_DAGESH An instance of HebrewChar representing the letter '\ufb3c' . This is a rarely used special character. LAMED_WIDE An instance of HebrewChar representing the letter '\ufb25' . This is a rarely used special character. LAMID Simple pointer to LAMED . LOWER_DOT An instance of NiqqudChar representing the Niqqud '\u05c5' . MAHPACH An instance of TaamimChar representing the Ta'amim '\u05a4' . MAQAF An instance of TaamimChar representing the character '\u05be' . MASORA An instance of TaamimChar representing the Ta'amim '\u05af' . MEM An instance of HebrewChar representing the letter '\u05de' . MEM_DAGESH An instance of HebrewChar representing the letter '\ufb3e' . This is a rarely used special character. MEM_SOFIT An instance of HebrewChar representing the letter '\u05dd' . MERCHA An instance of TaamimChar representing the Ta'amim '\u05a5' . MERCHA_KEFULA An instance of TaamimChar representing the Ta'amim '\u05a6' . METEG An instance of TaamimChar representing the Ta'amim '\u05bd' . MUNACH An instance of TaamimChar representing the Ta'amim '\u05a3' . NIQQUD_CHARS : List [ hebrew . chars . NiqqudChar ] A List of all instances of NiqqudChar . NUN An instance of HebrewChar representing the letter '\u05e0' . NUN_DAGESH An instance of HebrewChar representing the letter '\ufb40' . This is a rarely used special character. NUN_HAFUKHA Simple pointer to INVERTED_NUN . NUN_SOFIT An instance of HebrewChar representing the letter '\u05df' . OLA An instance of TaamimChar representing the Ta'amim '\u05ab' . OTHER_CHARS : List [ hebrew . chars . OtherChar ] A List of all instances of OtherChar . PASEQ An instance of TaamimChar representing the character '\u05c0' . PASHTA An instance of TaamimChar representing the Ta'amim '\u0599' . PASHTA_2 An instance of TaamimChar representing the Ta'amim '\u05a8' . PATACH Simple pointer to PATAH PATAH An instance of NiqqudChar representing the Niqqud '\u05b7' . PAZER An instance of TaamimChar representing the Ta'amim '\u05a1' . PAZER_GADOL Simple pointer to QARNEY_PARA since they share the same Unicode character. PE An instance of HebrewChar representing the letter '\u05e4\u05bc' . This is not strictly a letter, but is included because it is often treated as one. PE_DAGESH An instance of HebrewChar representing the letter '\ufb44' . This is a rarely used special character. PE_RAFE An instance of HebrewChar representing the letter '\ufb4e' . This is a rarely used special character. PE_SOFIT An instance of HebrewChar representing the letter '\u05e3\u05bc' . This is not strictly a letter, but is included because it is often treated as one. PLAIN_SIN An instance of HebrewChar representing the letter '\u05e9' . QADMA Simple pointer to PASHTA_2 since they share the same Unicode character. QAMATS An instance of NiqqudChar representing the Niqqud '\u05b8' . QAMATS_KATAN An instance of NiqqudChar representing the Niqqud '\u05c7' . QARNEY_PARA An instance of TaamimChar representing the Ta'amim '\u059f' . QOF An instance of HebrewChar representing the letter '\u05e7' . QOF_DAGESH An instance of HebrewChar representing the letter '\ufb47' . This is a rarely used special character. QUBUTS An instance of NiqqudChar representing the Niqqud '\u05bb' . RAFE An instance of TaamimChar representing the Ta'amim '\u05bf' . RESH An instance of HebrewChar representing the letter '\u05e8' . RESH_DAGESH An instance of HebrewChar representing the letter '\ufb48' . This is a rarely used special character. RESH_WIDE An instance of HebrewChar representing the letter '\ufb27' . This is a rarely used special character. REVIA An instance of TaamimChar representing the Ta'amim '\u0597' . SAF Simple pointer to SAV . SAMACH Simple pointer to SAMEKH . SAMEKH An instance of HebrewChar representing the letter '\u05e1' . SAMEKH_DAGESH An instance of HebrewChar representing the letter '\ufb41' . This is a rarely used special character. SAV An instance of HebrewChar representing the letter '\u05ea' . SEGOL An instance of NiqqudChar representing the Niqqud '\u05b6' . SEGOL_TOP An instance of TaamimChar representing the Ta'amim '\u0592' . SHALSHELET An instance of TaamimChar representing the Ta'amim '\u0593' . SHEVA An instance of NiqqudChar representing the Niqqud '\u05b0' . SHIN An instance of HebrewChar representing the letter '\u05e9\u05c1' . This is not strictly a letter, but is included because it is often treated as one. SHIN_DAGESH An instance of HebrewChar representing the letter '\ufb49' . This is a rarely used special character. SHIN_DAGESH_SHIN_DOT An instance of HebrewChar representing the letter '\ufb2c' . This is a rarely used special character. SHIN_DAGESH_SIN_DOT An instance of HebrewChar representing the letter '\ufb2d' . This is a rarely used special character. SHIN_DOT An instance of NiqqudChar representing the Niqqud '\u05c1' . SHIN_SHIN_DOT An instance of HebrewChar representing the letter '\ufb2a' . This is a rarely used special character. SHIN_SIN_DOT An instance of HebrewChar representing the letter '\ufb2b' . This is a rarely used special character. SHIVAH Simple pointer to SHEVA SHURUK An instance of NiqqudChar representing the Niqqud '\u05d5\u05bc' . SIN An instance of HebrewChar representing the letter '\u05e9\u05c2' . This is not strictly a letter, but is included because it is often treated as one. SIN_DOT An instance of NiqqudChar representing the Niqqud '\u05c2' . SOF_PASSUK An instance of TaamimChar representing the character '\u05c3' . TAAMIM_CHARS : List [ hebrew . chars . TaamimChar ] A List of all instances of TaamimChar . TAF Simple pointer to TAV . TAV An instance of HebrewChar representing the letter '\u05ea\u05bc' . This is not strictly a letter, but is included because it is often treated as one. TAV_DAGESH An instance of HebrewChar representing the letter '\ufb4a' . This is a rarely used special character. TAV_WIDE An instance of HebrewChar representing the letter '\ufb28' . This is a rarely used special character. TELISHA_GEDOLA An instance of TaamimChar representing the Ta'amim '\u05a0' . TELISHA_KETANNAH An instance of TaamimChar representing the Ta'amim '\u05a9' . TES Simple pointer to TET . TET An instance of HebrewChar representing the letter '\u05d8' . TET_DAGESH An instance of HebrewChar representing the letter '\ufb38' . This is a rarely used special character. TEVIR An instance of TaamimChar representing the Ta'amim '\u059b' . TIFCHA An instance of TaamimChar representing the Ta'amim '\u0596' . TSADI An instance of HebrewChar representing the letter '\u05e6' . TSADI_DAGESH An instance of HebrewChar representing the letter '\ufb46' . This is a rarely used special character. TSADI_SOFIT An instance of HebrewChar representing the letter '\u05e5' . TSERE An instance of NiqqudChar representing the Niqqud '\u05b5' . TZADIK Simple pointer to TSADI . TZADIK_SOFIT Simple pointer to TSADI_SOFIT . UPPER_DOT An instance of NiqqudChar representing the Niqqud '\u05c4' . VAV An instance of HebrewChar representing the letter '\u05d5' . VAV_DAGESH An instance of HebrewChar representing the letter '\ufb35' . This is a rarely used special character. VAV_HOLAM An instance of HebrewChar representing the letter '\ufb4b' . This is a rarely used special character. VAV_YOD An instance of YiddishChar representing the letter '\u05f1' . VAV_YUD Simple pointer to VAV_YOD . VET An instance of HebrewChar representing the letter '\u05d1' . VUV Simple pointer to VAV . VUV_YOD Simple pointer to VAV_YOD . VUV_YUD Simple pointer to VAV_YOD . YERACH_BEN_YOMO An instance of TaamimChar representing the Ta'amim '\u05aa' . YETIV An instance of TaamimChar representing the Ta'amim '\u059a' . YIDDISH_CHARS : List [ hebrew . chars . YiddishChar ] A List of all instances of YiddishChar . YOD An instance of HebrewChar representing the letter '\u05d9' . YOD_DAGESH An instance of HebrewChar representing the letter '\ufb39' . This is a rarely used special character. YOD_HIRIQ An instance of HebrewChar representing the letter '\ufb1d' . This is a rarely used special character. YOD_TRIANGLE An instance of HebrewChar representing the letter '\u05ef' . YOD_YOD_PATAH An instance of HebrewChar representing the letter '\ufb1f' . This is a rarely used special character. YUD Simple pointer to YOD . YUD_TRIANGLE Simple pointer to YOD_TRIANGLE . ZAQEF_GADOL An instance of TaamimChar representing the Ta'amim '\u0595' . ZAQEF_QATAN An instance of TaamimChar representing the Ta'amim '\u0594' . ZARQA An instance of TaamimChar representing the Ta'amim '\u0598' . ZAYIN An instance of HebrewChar representing the letter '\u05d6' . ZAYIN_DAGESH An instance of HebrewChar representing the letter '\ufb36' . This is a rarely used special character. ZINOR An instance of TaamimChar representing the Ta'amim '\u05ae' .","title":"Constants"},{"location":"docstrings/chars/constants/#hebrew.chars.ALEF_MAPIQ","text":"An instance of HebrewChar representing the letter '\ufb30' . This is a rarely used special character.","title":"ALEF_MAPIQ"},{"location":"docstrings/chars/constants/#hebrew.chars.ALEF_PATAH","text":"An instance of HebrewChar representing the letter '\ufb2e' . This is a rarely used special character.","title":"ALEF_PATAH"},{"location":"docstrings/chars/constants/#hebrew.chars.ALEF_QAMATZ","text":"An instance of HebrewChar representing the letter '\ufb2f' . This is a rarely used special character.","title":"ALEF_QAMATZ"},{"location":"docstrings/chars/constants/#hebrew.chars.ALEF_WIDE","text":"An instance of HebrewChar representing the letter '\ufb21' . This is a rarely used special character.","title":"ALEF_WIDE"},{"location":"docstrings/chars/constants/#hebrew.chars.ALEPH","text":"An instance of HebrewChar representing the letter '\u05d0'","title":"ALEPH"},{"location":"docstrings/chars/constants/#hebrew.chars.ALEPH_LAMED","text":"An instance of HebrewChar representing the letter '\ufb4f' . This is a rarely used special character.","title":"ALEPH_LAMED"},{"location":"docstrings/chars/constants/#hebrew.chars.ALEPH_SYMBOL","text":"An instance of HebrewChar representing the letter '\u2135' . This is a rarely used special character.","title":"ALEPH_SYMBOL"},{"location":"docstrings/chars/constants/#hebrew.chars.ALL_CHARS","text":"Every instance of a character class. This is used for defining collections with list comprehensions based on the Chars metadata. It can be relied on as being a complete list of Unicode characters used in Hebrew (and Yiddish etc).","title":"ALL_CHARS"},{"location":"docstrings/chars/constants/#hebrew.chars.ALTERNATIVE_PLUS_SIGN","text":"An instance of OtherChar representing the character '\ufb29' .","title":"ALTERNATIVE_PLUS_SIGN"},{"location":"docstrings/chars/constants/#hebrew.chars.ATNAH_HAFUKH","text":"An instance of TaamimChar representing the Ta'amim '\u05a2' .","title":"ATNAH_HAFUKH"},{"location":"docstrings/chars/constants/#hebrew.chars.AYIN","text":"An instance of HebrewChar representing the letter '\u05e2' .","title":"AYIN"},{"location":"docstrings/chars/constants/#hebrew.chars.AYIN_ALT","text":"An instance of HebrewChar representing the letter '\ufb20' . This is a rarely used special character.","title":"AYIN_ALT"},{"location":"docstrings/chars/constants/#hebrew.chars.AZLA_GERESH","text":"An instance of TaamimChar representing the Ta'amim '\u059c' .","title":"AZLA_GERESH"},{"location":"docstrings/chars/constants/#hebrew.chars.BES","text":"Simple pointer to BET .","title":"BES"},{"location":"docstrings/chars/constants/#hebrew.chars.BET","text":"An instance of HebrewChar representing the letter '\u05d1\u05bc' . This is not strictly a letter, but is included because it is often treated as one.","title":"BET"},{"location":"docstrings/chars/constants/#hebrew.chars.BET_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb31' . This is a rarely used special character.","title":"BET_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.BET_RAFE","text":"An instance of HebrewChar representing the letter '\ufb4c' . This is a rarely used special character.","title":"BET_RAFE"},{"location":"docstrings/chars/constants/#hebrew.chars.BET_SYMBOL","text":"An instance of HebrewChar representing the letter '\u2136' . This is a rarely used special character.","title":"BET_SYMBOL"},{"location":"docstrings/chars/constants/#hebrew.chars.CAF","text":"An instance of HebrewChar representing the letter '\u05db\u05bc' . This is not strictly a letter, but is included because it is often treated as one.","title":"CAF"},{"location":"docstrings/chars/constants/#hebrew.chars.CHAF","text":"An instance of HebrewChar representing the letter '\u05db' .","title":"CHAF"},{"location":"docstrings/chars/constants/#hebrew.chars.CHAF_SOFIT","text":"An instance of HebrewChar representing the letter '\u05da' .","title":"CHAF_SOFIT"},{"location":"docstrings/chars/constants/#hebrew.chars.CHARS","text":"A dict of all instances of all supported Char types where the key is the char and the value is an instance of BaseHebrewChar. This is useful for when you have a hebrew char and want to get its metadata class. assert CHARS['\u05d0'] == ALEPH","title":"CHARS"},{"location":"docstrings/chars/constants/#hebrew.chars.CHES","text":"Simple pointer to CHET .","title":"CHES"},{"location":"docstrings/chars/constants/#hebrew.chars.CHET","text":"An instance of HebrewChar representing the letter '\u05d6' .","title":"CHET"},{"location":"docstrings/chars/constants/#hebrew.chars.CHIRIK","text":"Simple pointer to HIRIQ","title":"CHIRIK"},{"location":"docstrings/chars/constants/#hebrew.chars.DAGESH","text":"An instance of NiqqudChar representing the Niqqud '\u05bc' .","title":"DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.DALED","text":"Simple pointer to DALET .","title":"DALED"},{"location":"docstrings/chars/constants/#hebrew.chars.DALET","text":"An instance of HebrewChar representing the letter '\u05d3' .","title":"DALET"},{"location":"docstrings/chars/constants/#hebrew.chars.DALET_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb33' . This is a rarely used special character.","title":"DALET_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.DALET_SYMBOL","text":"An instance of HebrewChar representing the letter '\u2138' . This is a rarely used special character.","title":"DALET_SYMBOL"},{"location":"docstrings/chars/constants/#hebrew.chars.DALET_WIDE","text":"An instance of HebrewChar representing the letter '\ufb22' . This is a rarely used special character.","title":"DALET_WIDE"},{"location":"docstrings/chars/constants/#hebrew.chars.DARGA","text":"An instance of TaamimChar representing the Ta'amim '\u05a7' .","title":"DARGA"},{"location":"docstrings/chars/constants/#hebrew.chars.DEHI","text":"An instance of TaamimChar representing the Ta'amim '\u05ad' .","title":"DEHI"},{"location":"docstrings/chars/constants/#hebrew.chars.DOUBLE_VAV","text":"An instance of YiddishChar representing the letter '\u05f0' .","title":"DOUBLE_VAV"},{"location":"docstrings/chars/constants/#hebrew.chars.DOUBLE_VUV","text":"Simple pointer to DOUBLE_VAV .","title":"DOUBLE_VUV"},{"location":"docstrings/chars/constants/#hebrew.chars.DOUBLE_YOD","text":"An instance of YiddishChar representing the letter '\u05f2' .","title":"DOUBLE_YOD"},{"location":"docstrings/chars/constants/#hebrew.chars.DOUBLE_YUD","text":"Simple pointer to DOUBLE_YOD .","title":"DOUBLE_YUD"},{"location":"docstrings/chars/constants/#hebrew.chars.ETNAHTA","text":"An instance of TaamimChar representing the Ta'amim '\u0591' .","title":"ETNAHTA"},{"location":"docstrings/chars/constants/#hebrew.chars.FE","text":"An instance of HebrewChar representing the letter '\u05e4' .","title":"FE"},{"location":"docstrings/chars/constants/#hebrew.chars.FE_SOFIT","text":"An instance of HebrewChar representing the letter '\u05e3' .","title":"FE_SOFIT"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_CHAF","text":"Simple pointer to CHAF_SOFIT .","title":"FINAL_CHAF"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_FE","text":"Simple pointer to FE_SOFIT .","title":"FINAL_FE"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_KAF","text":"Simple pointer to KAF_SOFIT .","title":"FINAL_KAF"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_KAF_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb3a' . This is a rarely used special character.","title":"FINAL_KAF_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_LETTERS","text":"A list of all Hebrew characters that are final letters. While we do have letters like '\u05e3\u05bc' defined, they do not return in this array; it contains only the plain final letters.","title":"FINAL_LETTERS"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_MEM","text":"Simple pointer to MEM_SOFIT .","title":"FINAL_MEM"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_MEM_WIDE","text":"An instance of HebrewChar representing the letter '\ufb26' . This is a rarely used special character.","title":"FINAL_MEM_WIDE"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_NUN","text":"Simple pointer to NUN_SOFIT .","title":"FINAL_NUN"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_PE","text":"Simple pointer to PE_SOFIT .","title":"FINAL_PE"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_PE_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb43' . This is a rarely used special character.","title":"FINAL_PE_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_TSADI","text":"Simple pointer to TSADI_SOFIT .","title":"FINAL_TSADI"},{"location":"docstrings/chars/constants/#hebrew.chars.FINAL_TZADIK","text":"Simple pointer to TSADI_SOFIT .","title":"FINAL_TZADIK"},{"location":"docstrings/chars/constants/#hebrew.chars.GERESH","text":"An instance of OtherChar representing the character '\u05f3' .","title":"GERESH"},{"location":"docstrings/chars/constants/#hebrew.chars.GERESH_MUQDAM","text":"An instance of TaamimChar representing the Ta'amim '\u059d' .","title":"GERESH_MUQDAM"},{"location":"docstrings/chars/constants/#hebrew.chars.GERSHAYIM","text":"An instance of OtherChar representing the character '\u05f4' .","title":"GERSHAYIM"},{"location":"docstrings/chars/constants/#hebrew.chars.GERSHAYIM_2","text":"An instance of TaamimChar representing the Ta'amim '\u059e' .","title":"GERSHAYIM_2"},{"location":"docstrings/chars/constants/#hebrew.chars.GIMEL","text":"An instance of HebrewChar representing the letter '\u05d2' .","title":"GIMEL"},{"location":"docstrings/chars/constants/#hebrew.chars.GIMEL_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb32' . This is a rarely used special character.","title":"GIMEL_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.GIMEL_SYMBOL","text":"An instance of HebrewChar representing the letter '\u2137' . This is a rarely used special character.","title":"GIMEL_SYMBOL"},{"location":"docstrings/chars/constants/#hebrew.chars.HATAF_PATAH","text":"An instance of NiqqudChar representing the Niqqud '\u05b2' .","title":"HATAF_PATAH"},{"location":"docstrings/chars/constants/#hebrew.chars.HATAF_QAMATS","text":"An instance of NiqqudChar representing the Niqqud '\u05b3' .","title":"HATAF_QAMATS"},{"location":"docstrings/chars/constants/#hebrew.chars.HATAF_SEGOL","text":"An instance of NiqqudChar representing the Niqqud '\u05b1' .","title":"HATAF_SEGOL"},{"location":"docstrings/chars/constants/#hebrew.chars.HE","text":"An instance of HebrewChar representing the letter '\u05d4' .","title":"HE"},{"location":"docstrings/chars/constants/#hebrew.chars.HEBREW_CHARS","text":"A List of all instances of HebrewChar . This will include letters like '\u05e3\u05bc'","title":"HEBREW_CHARS"},{"location":"docstrings/chars/constants/#hebrew.chars.HEI","text":"Simple pointer to HE .","title":"HEI"},{"location":"docstrings/chars/constants/#hebrew.chars.HET","text":"Simple pointer to CHET .","title":"HET"},{"location":"docstrings/chars/constants/#hebrew.chars.HEY","text":"Simple pointer to HE .","title":"HEY"},{"location":"docstrings/chars/constants/#hebrew.chars.HE_MAPIQ","text":"An instance of HebrewChar representing the letter '\ufb34' . This is a rarely used special character.","title":"HE_MAPIQ"},{"location":"docstrings/chars/constants/#hebrew.chars.HE_WIDE","text":"An instance of HebrewChar representing the letter '\ufb23' . This is a rarely used special character.","title":"HE_WIDE"},{"location":"docstrings/chars/constants/#hebrew.chars.HIRIQ","text":"An instance of NiqqudChar representing the Niqqud '\u05b4' .","title":"HIRIQ"},{"location":"docstrings/chars/constants/#hebrew.chars.HOLAM","text":"An instance of NiqqudChar representing the Niqqud '\u05b9' .","title":"HOLAM"},{"location":"docstrings/chars/constants/#hebrew.chars.HOLAM_HASER","text":"An instance of NiqqudChar representing the Niqqud '\u05ba' .","title":"HOLAM_HASER"},{"location":"docstrings/chars/constants/#hebrew.chars.ILUY","text":"An instance of TaamimChar representing the Ta'amim '\u05ac' .","title":"ILUY"},{"location":"docstrings/chars/constants/#hebrew.chars.INVERTED_NUN","text":"An instance of OtherChar representing the letter '\u05c6' . This is a rarely used special character.","title":"INVERTED_NUN"},{"location":"docstrings/chars/constants/#hebrew.chars.JUDEO_SPANISH_VARIKA","text":"An instance of TaamimChar representing the Ta'amim '\ufb1e' .","title":"JUDEO_SPANISH_VARIKA"},{"location":"docstrings/chars/constants/#hebrew.chars.KAF_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb3b' . This is a rarely used special character.","title":"KAF_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.KAF_RAFE","text":"An instance of HebrewChar representing the letter '\ufb4d' . This is a rarely used special character.","title":"KAF_RAFE"},{"location":"docstrings/chars/constants/#hebrew.chars.KAF_SOFIT","text":"An instance of HebrewChar representing the letter '\u05da\u05bc' . This is not strictly a letter, but is included because it is often treated as one.","title":"KAF_SOFIT"},{"location":"docstrings/chars/constants/#hebrew.chars.KAF_WIDE","text":"An instance of HebrewChar representing the letter '\ufb24' . This is a rarely used special character.","title":"KAF_WIDE"},{"location":"docstrings/chars/constants/#hebrew.chars.KUBUTZ","text":"Simple pointer to QUBUTS","title":"KUBUTZ"},{"location":"docstrings/chars/constants/#hebrew.chars.KUF","text":"Simple pointer to TSADI_SOFIT .","title":"KUF"},{"location":"docstrings/chars/constants/#hebrew.chars.KUMATZ","text":"Simple pointer to QAMATS","title":"KUMATZ"},{"location":"docstrings/chars/constants/#hebrew.chars.LAMED","text":"An instance of HebrewChar representing the letter '\u05dc' .","title":"LAMED"},{"location":"docstrings/chars/constants/#hebrew.chars.LAMED_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb3c' . This is a rarely used special character.","title":"LAMED_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.LAMED_WIDE","text":"An instance of HebrewChar representing the letter '\ufb25' . This is a rarely used special character.","title":"LAMED_WIDE"},{"location":"docstrings/chars/constants/#hebrew.chars.LAMID","text":"Simple pointer to LAMED .","title":"LAMID"},{"location":"docstrings/chars/constants/#hebrew.chars.LOWER_DOT","text":"An instance of NiqqudChar representing the Niqqud '\u05c5' .","title":"LOWER_DOT"},{"location":"docstrings/chars/constants/#hebrew.chars.MAHPACH","text":"An instance of TaamimChar representing the Ta'amim '\u05a4' .","title":"MAHPACH"},{"location":"docstrings/chars/constants/#hebrew.chars.MAQAF","text":"An instance of TaamimChar representing the character '\u05be' .","title":"MAQAF"},{"location":"docstrings/chars/constants/#hebrew.chars.MASORA","text":"An instance of TaamimChar representing the Ta'amim '\u05af' .","title":"MASORA"},{"location":"docstrings/chars/constants/#hebrew.chars.MEM","text":"An instance of HebrewChar representing the letter '\u05de' .","title":"MEM"},{"location":"docstrings/chars/constants/#hebrew.chars.MEM_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb3e' . This is a rarely used special character.","title":"MEM_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.MEM_SOFIT","text":"An instance of HebrewChar representing the letter '\u05dd' .","title":"MEM_SOFIT"},{"location":"docstrings/chars/constants/#hebrew.chars.MERCHA","text":"An instance of TaamimChar representing the Ta'amim '\u05a5' .","title":"MERCHA"},{"location":"docstrings/chars/constants/#hebrew.chars.MERCHA_KEFULA","text":"An instance of TaamimChar representing the Ta'amim '\u05a6' .","title":"MERCHA_KEFULA"},{"location":"docstrings/chars/constants/#hebrew.chars.METEG","text":"An instance of TaamimChar representing the Ta'amim '\u05bd' .","title":"METEG"},{"location":"docstrings/chars/constants/#hebrew.chars.MUNACH","text":"An instance of TaamimChar representing the Ta'amim '\u05a3' .","title":"MUNACH"},{"location":"docstrings/chars/constants/#hebrew.chars.NIQQUD_CHARS","text":"A List of all instances of NiqqudChar .","title":"NIQQUD_CHARS"},{"location":"docstrings/chars/constants/#hebrew.chars.NUN","text":"An instance of HebrewChar representing the letter '\u05e0' .","title":"NUN"},{"location":"docstrings/chars/constants/#hebrew.chars.NUN_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb40' . This is a rarely used special character.","title":"NUN_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.NUN_HAFUKHA","text":"Simple pointer to INVERTED_NUN .","title":"NUN_HAFUKHA"},{"location":"docstrings/chars/constants/#hebrew.chars.NUN_SOFIT","text":"An instance of HebrewChar representing the letter '\u05df' .","title":"NUN_SOFIT"},{"location":"docstrings/chars/constants/#hebrew.chars.OLA","text":"An instance of TaamimChar representing the Ta'amim '\u05ab' .","title":"OLA"},{"location":"docstrings/chars/constants/#hebrew.chars.OTHER_CHARS","text":"A List of all instances of OtherChar .","title":"OTHER_CHARS"},{"location":"docstrings/chars/constants/#hebrew.chars.PASEQ","text":"An instance of TaamimChar representing the character '\u05c0' .","title":"PASEQ"},{"location":"docstrings/chars/constants/#hebrew.chars.PASHTA","text":"An instance of TaamimChar representing the Ta'amim '\u0599' .","title":"PASHTA"},{"location":"docstrings/chars/constants/#hebrew.chars.PASHTA_2","text":"An instance of TaamimChar representing the Ta'amim '\u05a8' .","title":"PASHTA_2"},{"location":"docstrings/chars/constants/#hebrew.chars.PATACH","text":"Simple pointer to PATAH","title":"PATACH"},{"location":"docstrings/chars/constants/#hebrew.chars.PATAH","text":"An instance of NiqqudChar representing the Niqqud '\u05b7' .","title":"PATAH"},{"location":"docstrings/chars/constants/#hebrew.chars.PAZER","text":"An instance of TaamimChar representing the Ta'amim '\u05a1' .","title":"PAZER"},{"location":"docstrings/chars/constants/#hebrew.chars.PAZER_GADOL","text":"Simple pointer to QARNEY_PARA since they share the same Unicode character.","title":"PAZER_GADOL"},{"location":"docstrings/chars/constants/#hebrew.chars.PE","text":"An instance of HebrewChar representing the letter '\u05e4\u05bc' . This is not strictly a letter, but is included because it is often treated as one.","title":"PE"},{"location":"docstrings/chars/constants/#hebrew.chars.PE_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb44' . This is a rarely used special character.","title":"PE_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.PE_RAFE","text":"An instance of HebrewChar representing the letter '\ufb4e' . This is a rarely used special character.","title":"PE_RAFE"},{"location":"docstrings/chars/constants/#hebrew.chars.PE_SOFIT","text":"An instance of HebrewChar representing the letter '\u05e3\u05bc' . This is not strictly a letter, but is included because it is often treated as one.","title":"PE_SOFIT"},{"location":"docstrings/chars/constants/#hebrew.chars.PLAIN_SIN","text":"An instance of HebrewChar representing the letter '\u05e9' .","title":"PLAIN_SIN"},{"location":"docstrings/chars/constants/#hebrew.chars.QADMA","text":"Simple pointer to PASHTA_2 since they share the same Unicode character.","title":"QADMA"},{"location":"docstrings/chars/constants/#hebrew.chars.QAMATS","text":"An instance of NiqqudChar representing the Niqqud '\u05b8' .","title":"QAMATS"},{"location":"docstrings/chars/constants/#hebrew.chars.QAMATS_KATAN","text":"An instance of NiqqudChar representing the Niqqud '\u05c7' .","title":"QAMATS_KATAN"},{"location":"docstrings/chars/constants/#hebrew.chars.QARNEY_PARA","text":"An instance of TaamimChar representing the Ta'amim '\u059f' .","title":"QARNEY_PARA"},{"location":"docstrings/chars/constants/#hebrew.chars.QOF","text":"An instance of HebrewChar representing the letter '\u05e7' .","title":"QOF"},{"location":"docstrings/chars/constants/#hebrew.chars.QOF_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb47' . This is a rarely used special character.","title":"QOF_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.QUBUTS","text":"An instance of NiqqudChar representing the Niqqud '\u05bb' .","title":"QUBUTS"},{"location":"docstrings/chars/constants/#hebrew.chars.RAFE","text":"An instance of TaamimChar representing the Ta'amim '\u05bf' .","title":"RAFE"},{"location":"docstrings/chars/constants/#hebrew.chars.RESH","text":"An instance of HebrewChar representing the letter '\u05e8' .","title":"RESH"},{"location":"docstrings/chars/constants/#hebrew.chars.RESH_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb48' . This is a rarely used special character.","title":"RESH_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.RESH_WIDE","text":"An instance of HebrewChar representing the letter '\ufb27' . This is a rarely used special character.","title":"RESH_WIDE"},{"location":"docstrings/chars/constants/#hebrew.chars.REVIA","text":"An instance of TaamimChar representing the Ta'amim '\u0597' .","title":"REVIA"},{"location":"docstrings/chars/constants/#hebrew.chars.SAF","text":"Simple pointer to SAV .","title":"SAF"},{"location":"docstrings/chars/constants/#hebrew.chars.SAMACH","text":"Simple pointer to SAMEKH .","title":"SAMACH"},{"location":"docstrings/chars/constants/#hebrew.chars.SAMEKH","text":"An instance of HebrewChar representing the letter '\u05e1' .","title":"SAMEKH"},{"location":"docstrings/chars/constants/#hebrew.chars.SAMEKH_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb41' . This is a rarely used special character.","title":"SAMEKH_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.SAV","text":"An instance of HebrewChar representing the letter '\u05ea' .","title":"SAV"},{"location":"docstrings/chars/constants/#hebrew.chars.SEGOL","text":"An instance of NiqqudChar representing the Niqqud '\u05b6' .","title":"SEGOL"},{"location":"docstrings/chars/constants/#hebrew.chars.SEGOL_TOP","text":"An instance of TaamimChar representing the Ta'amim '\u0592' .","title":"SEGOL_TOP"},{"location":"docstrings/chars/constants/#hebrew.chars.SHALSHELET","text":"An instance of TaamimChar representing the Ta'amim '\u0593' .","title":"SHALSHELET"},{"location":"docstrings/chars/constants/#hebrew.chars.SHEVA","text":"An instance of NiqqudChar representing the Niqqud '\u05b0' .","title":"SHEVA"},{"location":"docstrings/chars/constants/#hebrew.chars.SHIN","text":"An instance of HebrewChar representing the letter '\u05e9\u05c1' . This is not strictly a letter, but is included because it is often treated as one.","title":"SHIN"},{"location":"docstrings/chars/constants/#hebrew.chars.SHIN_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb49' . This is a rarely used special character.","title":"SHIN_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.SHIN_DAGESH_SHIN_DOT","text":"An instance of HebrewChar representing the letter '\ufb2c' . This is a rarely used special character.","title":"SHIN_DAGESH_SHIN_DOT"},{"location":"docstrings/chars/constants/#hebrew.chars.SHIN_DAGESH_SIN_DOT","text":"An instance of HebrewChar representing the letter '\ufb2d' . This is a rarely used special character.","title":"SHIN_DAGESH_SIN_DOT"},{"location":"docstrings/chars/constants/#hebrew.chars.SHIN_DOT","text":"An instance of NiqqudChar representing the Niqqud '\u05c1' .","title":"SHIN_DOT"},{"location":"docstrings/chars/constants/#hebrew.chars.SHIN_SHIN_DOT","text":"An instance of HebrewChar representing the letter '\ufb2a' . This is a rarely used special character.","title":"SHIN_SHIN_DOT"},{"location":"docstrings/chars/constants/#hebrew.chars.SHIN_SIN_DOT","text":"An instance of HebrewChar representing the letter '\ufb2b' . This is a rarely used special character.","title":"SHIN_SIN_DOT"},{"location":"docstrings/chars/constants/#hebrew.chars.SHIVAH","text":"Simple pointer to SHEVA","title":"SHIVAH"},{"location":"docstrings/chars/constants/#hebrew.chars.SHURUK","text":"An instance of NiqqudChar representing the Niqqud '\u05d5\u05bc' .","title":"SHURUK"},{"location":"docstrings/chars/constants/#hebrew.chars.SIN","text":"An instance of HebrewChar representing the letter '\u05e9\u05c2' . This is not strictly a letter, but is included because it is often treated as one.","title":"SIN"},{"location":"docstrings/chars/constants/#hebrew.chars.SIN_DOT","text":"An instance of NiqqudChar representing the Niqqud '\u05c2' .","title":"SIN_DOT"},{"location":"docstrings/chars/constants/#hebrew.chars.SOF_PASSUK","text":"An instance of TaamimChar representing the character '\u05c3' .","title":"SOF_PASSUK"},{"location":"docstrings/chars/constants/#hebrew.chars.TAAMIM_CHARS","text":"A List of all instances of TaamimChar .","title":"TAAMIM_CHARS"},{"location":"docstrings/chars/constants/#hebrew.chars.TAF","text":"Simple pointer to TAV .","title":"TAF"},{"location":"docstrings/chars/constants/#hebrew.chars.TAV","text":"An instance of HebrewChar representing the letter '\u05ea\u05bc' . This is not strictly a letter, but is included because it is often treated as one.","title":"TAV"},{"location":"docstrings/chars/constants/#hebrew.chars.TAV_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb4a' . This is a rarely used special character.","title":"TAV_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.TAV_WIDE","text":"An instance of HebrewChar representing the letter '\ufb28' . This is a rarely used special character.","title":"TAV_WIDE"},{"location":"docstrings/chars/constants/#hebrew.chars.TELISHA_GEDOLA","text":"An instance of TaamimChar representing the Ta'amim '\u05a0' .","title":"TELISHA_GEDOLA"},{"location":"docstrings/chars/constants/#hebrew.chars.TELISHA_KETANNAH","text":"An instance of TaamimChar representing the Ta'amim '\u05a9' .","title":"TELISHA_KETANNAH"},{"location":"docstrings/chars/constants/#hebrew.chars.TES","text":"Simple pointer to TET .","title":"TES"},{"location":"docstrings/chars/constants/#hebrew.chars.TET","text":"An instance of HebrewChar representing the letter '\u05d8' .","title":"TET"},{"location":"docstrings/chars/constants/#hebrew.chars.TET_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb38' . This is a rarely used special character.","title":"TET_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.TEVIR","text":"An instance of TaamimChar representing the Ta'amim '\u059b' .","title":"TEVIR"},{"location":"docstrings/chars/constants/#hebrew.chars.TIFCHA","text":"An instance of TaamimChar representing the Ta'amim '\u0596' .","title":"TIFCHA"},{"location":"docstrings/chars/constants/#hebrew.chars.TSADI","text":"An instance of HebrewChar representing the letter '\u05e6' .","title":"TSADI"},{"location":"docstrings/chars/constants/#hebrew.chars.TSADI_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb46' . This is a rarely used special character.","title":"TSADI_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.TSADI_SOFIT","text":"An instance of HebrewChar representing the letter '\u05e5' .","title":"TSADI_SOFIT"},{"location":"docstrings/chars/constants/#hebrew.chars.TSERE","text":"An instance of NiqqudChar representing the Niqqud '\u05b5' .","title":"TSERE"},{"location":"docstrings/chars/constants/#hebrew.chars.TZADIK","text":"Simple pointer to TSADI .","title":"TZADIK"},{"location":"docstrings/chars/constants/#hebrew.chars.TZADIK_SOFIT","text":"Simple pointer to TSADI_SOFIT .","title":"TZADIK_SOFIT"},{"location":"docstrings/chars/constants/#hebrew.chars.UPPER_DOT","text":"An instance of NiqqudChar representing the Niqqud '\u05c4' .","title":"UPPER_DOT"},{"location":"docstrings/chars/constants/#hebrew.chars.VAV","text":"An instance of HebrewChar representing the letter '\u05d5' .","title":"VAV"},{"location":"docstrings/chars/constants/#hebrew.chars.VAV_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb35' . This is a rarely used special character.","title":"VAV_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.VAV_HOLAM","text":"An instance of HebrewChar representing the letter '\ufb4b' . This is a rarely used special character.","title":"VAV_HOLAM"},{"location":"docstrings/chars/constants/#hebrew.chars.VAV_YOD","text":"An instance of YiddishChar representing the letter '\u05f1' .","title":"VAV_YOD"},{"location":"docstrings/chars/constants/#hebrew.chars.VAV_YUD","text":"Simple pointer to VAV_YOD .","title":"VAV_YUD"},{"location":"docstrings/chars/constants/#hebrew.chars.VET","text":"An instance of HebrewChar representing the letter '\u05d1' .","title":"VET"},{"location":"docstrings/chars/constants/#hebrew.chars.VUV","text":"Simple pointer to VAV .","title":"VUV"},{"location":"docstrings/chars/constants/#hebrew.chars.VUV_YOD","text":"Simple pointer to VAV_YOD .","title":"VUV_YOD"},{"location":"docstrings/chars/constants/#hebrew.chars.VUV_YUD","text":"Simple pointer to VAV_YOD .","title":"VUV_YUD"},{"location":"docstrings/chars/constants/#hebrew.chars.YERACH_BEN_YOMO","text":"An instance of TaamimChar representing the Ta'amim '\u05aa' .","title":"YERACH_BEN_YOMO"},{"location":"docstrings/chars/constants/#hebrew.chars.YETIV","text":"An instance of TaamimChar representing the Ta'amim '\u059a' .","title":"YETIV"},{"location":"docstrings/chars/constants/#hebrew.chars.YIDDISH_CHARS","text":"A List of all instances of YiddishChar .","title":"YIDDISH_CHARS"},{"location":"docstrings/chars/constants/#hebrew.chars.YOD","text":"An instance of HebrewChar representing the letter '\u05d9' .","title":"YOD"},{"location":"docstrings/chars/constants/#hebrew.chars.YOD_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb39' . This is a rarely used special character.","title":"YOD_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.YOD_HIRIQ","text":"An instance of HebrewChar representing the letter '\ufb1d' . This is a rarely used special character.","title":"YOD_HIRIQ"},{"location":"docstrings/chars/constants/#hebrew.chars.YOD_TRIANGLE","text":"An instance of HebrewChar representing the letter '\u05ef' .","title":"YOD_TRIANGLE"},{"location":"docstrings/chars/constants/#hebrew.chars.YOD_YOD_PATAH","text":"An instance of HebrewChar representing the letter '\ufb1f' . This is a rarely used special character.","title":"YOD_YOD_PATAH"},{"location":"docstrings/chars/constants/#hebrew.chars.YUD","text":"Simple pointer to YOD .","title":"YUD"},{"location":"docstrings/chars/constants/#hebrew.chars.YUD_TRIANGLE","text":"Simple pointer to YOD_TRIANGLE .","title":"YUD_TRIANGLE"},{"location":"docstrings/chars/constants/#hebrew.chars.ZAQEF_GADOL","text":"An instance of TaamimChar representing the Ta'amim '\u0595' .","title":"ZAQEF_GADOL"},{"location":"docstrings/chars/constants/#hebrew.chars.ZAQEF_QATAN","text":"An instance of TaamimChar representing the Ta'amim '\u0594' .","title":"ZAQEF_QATAN"},{"location":"docstrings/chars/constants/#hebrew.chars.ZARQA","text":"An instance of TaamimChar representing the Ta'amim '\u0598' .","title":"ZARQA"},{"location":"docstrings/chars/constants/#hebrew.chars.ZAYIN","text":"An instance of HebrewChar representing the letter '\u05d6' .","title":"ZAYIN"},{"location":"docstrings/chars/constants/#hebrew.chars.ZAYIN_DAGESH","text":"An instance of HebrewChar representing the letter '\ufb36' . This is a rarely used special character.","title":"ZAYIN_DAGESH"},{"location":"docstrings/chars/constants/#hebrew.chars.ZINOR","text":"An instance of TaamimChar representing the Ta'amim '\u05ae' .","title":"ZINOR"}]}